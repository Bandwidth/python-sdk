# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bandwidth.models.update_call import UpdateCall

class TestUpdateCall(unittest.TestCase):
    """UpdateCall unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateCall:
        """Test UpdateCall
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return UpdateCall(
                state = 'active',
                redirect_url = 'https://myServer.example/bandwidth/webhooks/redirect',
                redirect_method = 'POST',
                username = 'mySecretUsername',
                password = 'mySecretPassword1!',
                redirect_fallback_url = 'https://myFallbackServer.example/bandwidth/webhooks/redirect',
                redirect_fallback_method = 'POST',
                fallback_username = 'mySecretUsername',
                fallback_password = 'mySecretPassword1!',
                tag = 'My Custom Tag'
            )
        else:
            return UpdateCall(
        )

    def testUpdateCall(self):
        """Test UpdateCall"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, UpdateCall)
        assert instance.state == 'active'
        assert instance.redirect_url == 'https://myServer.example/bandwidth/webhooks/redirect'
        assert instance.redirect_method == 'POST'
        assert instance.username == 'mySecretUsername'
        assert instance.password == 'mySecretPassword1!'
        assert instance.redirect_fallback_url == 'https://myFallbackServer.example/bandwidth/webhooks/redirect'
        assert instance.redirect_fallback_method == 'POST'
        assert instance.fallback_username == 'mySecretUsername'
        assert instance.fallback_password == 'mySecretPassword1!'
        assert instance.tag == 'My Custom Tag'

if __name__ == '__main__':
    unittest.main()
