# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from datetime import datetime

from bandwidth.models.multi_channel_message_request import MultiChannelMessageRequest
from bandwidth.models.multi_channel_channel_list_object import MultiChannelChannelListObject
from bandwidth.models.rbm_message_content_text import RbmMessageContentText
from bandwidth.models.multi_channel_channel_list_object_content import MultiChannelChannelListObjectContent

class TestMultiChannelMessageRequest(unittest.TestCase):
    """MultiChannelMessageRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiChannelMessageRequest:
        """Test MultiChannelMessageRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return MultiChannelMessageRequest(
                to = '+15552223333',
                channel_list = [
                    MultiChannelChannelListObject(
                        var_from = 'BandwidthRBM', 
                        application_id = '93de2206-9669-4e07-948d-329f4b722ee2', 
                        channel = 'RBM', 
                        content = MultiChannelChannelListObjectContent(
                            RbmMessageContentText(
                                text = 'Hello',
                            )
                        ),
                    )
                ],
                tag = 'custom string',
                priority = 'default',
                expiration = '2021-02-01T11:29:18-05:00'
            )
        else:
            return MultiChannelMessageRequest(
                to = '+15552223333',
                channel_list = [
                    MultiChannelChannelListObject(
                        var_from = 'BandwidthRBM', 
                        application_id = '93de2206-9669-4e07-948d-329f4b722ee2', 
                        channel = 'RBM', 
                         content = MultiChannelChannelListObjectContent(
                            RbmMessageContentText(
                                text = 'Hello',
                            )
                        ),
                    )
                ],
            )

    def testMultiChannelMessageRequest(self):
        """Test MultiChannelMessageRequest"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, MultiChannelMessageRequest)
        assert instance.to == '+15552223333'
        assert isinstance(instance.channel_list, list)
        assert isinstance(instance.channel_list[0], MultiChannelChannelListObject)
        assert instance.tag == 'custom string'
        assert instance.priority == 'default'
        assert isinstance(instance.expiration, datetime)

if __name__ == '__main__':
    unittest.main()
