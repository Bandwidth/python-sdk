# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from datetime import datetime

from bandwidth.models.transcription_available_callback import TranscriptionAvailableCallback
from bandwidth.models.transcription import Transcription

class TestTranscriptionAvailableCallback(unittest.TestCase):
    """TranscriptionAvailableCallback unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TranscriptionAvailableCallback:
        """Test TranscriptionAvailableCallback
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return TranscriptionAvailableCallback(
                event_type = 'bridgeComplete',
                event_time = '2022-06-17T22:19:40.375Z',
                account_id = '9900000',
                application_id = '04e88489-df02-4e34-a0ee-27a91849555f',
                var_from = '+15555555555',
                to = '+15555555555',
                direction = 'inbound',
                call_id = 'c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85',
                call_url = 'https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85',
                media_url = 'https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media',
                parent_call_id = 'c-95ac8d6e-1a31c52e-b38f-4198-93c1-51633ec68f8d',
                recording_id = 'r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833',
                enqueued_time = '2022-06-17T22:20Z',
                start_time = '2022-06-17T22:19:40.375Z',
                end_time = '2022-06-17T22:20Z',
                duration = 'PT13.67S',
                file_format = 'wav',
                tag = 'exampleTag',
                transcription = Transcription(
                    text = 'Nice talking to you, friend!', 
                    confidence = 0.9, ),
                transfer_caller_id = '+15555555555',
                transfer_to = '+15555555555'
            )
        else:
            return TranscriptionAvailableCallback(
        )

    def testTranscriptionAvailableCallback(self):
        """Test TranscriptionAvailableCallback"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, TranscriptionAvailableCallback)
        assert instance.event_type == 'bridgeComplete'
        assert instance.account_id == '9900000'
        assert instance.application_id == '04e88489-df02-4e34-a0ee-27a91849555f'
        assert instance.var_from == '+15555555555'
        assert instance.to == '+15555555555'
        assert instance.direction == 'inbound'
        assert instance.call_id == 'c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85'
        assert instance.call_url == 'https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85'
        assert instance.media_url == 'https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media'
        assert instance.parent_call_id == 'c-95ac8d6e-1a31c52e-b38f-4198-93c1-51633ec68f8d'
        assert instance.recording_id == 'r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833'
        assert isinstance(instance.enqueued_time, datetime)
        assert isinstance(instance.start_time, datetime)
        assert isinstance(instance.end_time, datetime)
        assert instance.duration == 'PT13.67S'
        assert instance.file_format == 'wav'
        assert instance.tag == 'exampleTag'
        assert isinstance(instance.transcription, Transcription)
        assert instance.transcription.text == 'Nice talking to you, friend!'
        assert instance.transcription.confidence == 0.9
        assert instance.transfer_caller_id == '+15555555555'
        assert instance.transfer_to == '+15555555555'

if __name__ == '__main__':
    unittest.main()
