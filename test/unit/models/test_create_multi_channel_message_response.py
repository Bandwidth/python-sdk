# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bandwidth.models.create_multi_channel_message_response import CreateMultiChannelMessageResponse
from bandwidth.models.link import Link
from bandwidth.models.multi_channel_message_data import MultiChannelMessageData
from bandwidth.models.error_object import ErrorObject

class TestCreateMultiChannelMessageResponse(unittest.TestCase):
    """CreateMultiChannelMessageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateMultiChannelMessageResponse:
        """Test CreateMultiChannelMessageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return CreateMultiChannelMessageResponse(
                links = [
                    Link(
                        rel = 'rel', 
                        href = 'href', )
                    ],
                data = MultiChannelMessageData(
                    message_id = '1589228074636lm4k2je7j7jklbn2', 
                    status = 'DELIVERED', 
                    time = '2025-01-01T18:20:16Z', 
                    direction = 'OUTBOUND', 
                    var_from = 'BandwidthRBM', 
                    to = '+15552223333', 
                    application_id = '93de2206-9669-4e07-948d-329f4b722ee2', 
                    channel = 'RBM', 
                    tag = 'custom string', ),
                errors = [
                    ErrorObject(
                        code = 'code', 
                        message = 'message', )
                    ]
            )
        else:
            return CreateMultiChannelMessageResponse(
        )

    def testCreateMultiChannelMessageResponse(self):
        """Test CreateMultiChannelMessageResponse"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, CreateMultiChannelMessageResponse)
        assert isinstance(instance.links, list)
        assert isinstance(instance.data, MultiChannelMessageData)
        assert isinstance(instance.errors, list)
        assert isinstance(instance.links[0], Link)
        assert isinstance(instance.data, MultiChannelMessageData)
        assert isinstance(instance.errors[0], ErrorObject)
        assert instance.data.message_id == '1589228074636lm4k2je7j7jklbn2'
        assert instance.data.status == 'DELIVERED'
        assert instance.data.direction == 'OUTBOUND'
        assert instance.data.var_from == 'BandwidthRBM'
        assert instance.data.to == '+15552223333'
        assert instance.data.application_id == '93de2206-9669-4e07-948d-329f4b722ee2'
        assert instance.data.channel == 'RBM'
        assert instance.data.tag == 'custom string'
        assert instance.errors[0].code == 'code'
        assert instance.errors[0].message == 'message'
        assert instance.links[0].rel == 'rel'
        assert instance.links[0].href == 'href'


if __name__ == '__main__':
    unittest.main()
