# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bandwidth.models.rbm_message_carousel_card import RbmMessageCarouselCard
from bandwidth.models.rbm_card_content import RbmCardContent
from bandwidth.models.rbm_card_content_media import RbmCardContentMedia
from bandwidth.models.multi_channel_action import MultiChannelAction
from bandwidth.models.rbm_action_base import RbmActionBase

class TestRbmMessageCarouselCard(unittest.TestCase):
    """RbmMessageCarouselCard unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RbmMessageCarouselCard:
        """Test RbmMessageCarouselCard
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return RbmMessageCarouselCard(
                card_width = 'SMALL',
                card_contents = [
                    RbmCardContent(
                        title = 'Bandwidth', 
                        description = 'Bandwidth is a communications platform as a service (CPaaS) company.', 
                        media = RbmCardContentMedia(
                            file_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                            thumbnail_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                            height = 'SHORT'
                        ), 
                        suggestions = [
                            MultiChannelAction(
                                RbmActionBase(
                                    type = 'REPLY',
                                    text = 'Hello world',
                                    post_back_data = '[B@32298473'
                                )
                            )
                        ],
                    )
                ],
                suggestions = [
                    MultiChannelAction(
                        RbmActionBase(
                            type = 'REPLY',
                            text = 'Hello world',
                            post_back_data = '[B@32298473'
                        )
                    )
                ]
            )
        else:
            return RbmMessageCarouselCard(
                card_width = 'SMALL',
                card_contents = [
                    RbmCardContent(
                        title = 'Bandwidth', 
                        description = 'Bandwidth is a communications platform as a service (CPaaS) company.', 
                        media = RbmCardContentMedia(
                            file_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                            thumbnail_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                            height = 'SHORT'
                        ), 
                        suggestions = [
                            MultiChannelAction(
                                RbmActionBase(
                                    type = 'REPLY',
                                    text = 'Hello world',
                                    post_back_data = '[B@32298473'
                                )
                            )
                        ],
                    )
                ],
                suggestions = [
                    MultiChannelAction(
                        RbmActionBase(
                            type = 'REPLY',
                            text = 'Hello world',
                            post_back_data = '[B@32298473'
                        )
                    )
                ]
        )

    def testRbmMessageCarouselCard(self):
        """Test RbmMessageCarouselCard"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, RbmMessageCarouselCard)
        assert instance.card_width == 'SMALL'
        assert isinstance(instance.card_contents, list)
        assert len(instance.card_contents) > 0
        assert isinstance(instance.card_contents[0], RbmCardContent)
        assert instance.suggestions is not None
        assert isinstance(instance.suggestions, list)
        assert len(instance.suggestions) > 0
        assert isinstance(instance.suggestions[0], MultiChannelAction)

if __name__ == '__main__':
    unittest.main()
