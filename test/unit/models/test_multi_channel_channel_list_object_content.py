# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bandwidth.models.multi_channel_channel_list_object_content import MultiChannelChannelListObjectContent
from bandwidth.models.rbm_message_content_text import RbmMessageContentText
from bandwidth.models.rbm_message_media import RbmMessageMedia
from bandwidth.models.rbm_message_content_rich_card import RbmMessageContentRichCard
from bandwidth.models.sms_message_content import SmsMessageContent
from bandwidth.models.mms_message_content import MmsMessageContent
from bandwidth.models.multi_channel_action import MultiChannelAction
from bandwidth.models.rbm_action_base import RbmActionBase
from bandwidth.models.rbm_card_content_media import RbmCardContentMedia
from bandwidth.models.rbm_standalone_card import RbmStandaloneCard
from bandwidth.models.rbm_card_content import RbmCardContent
from bandwidth.models.rbm_message_content_file import RbmMessageContentFile


class TestMultiChannelChannelListObjectContent(unittest.TestCase):
    """MultiChannelChannelListObjectContent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiChannelChannelListObjectContent:
        """Test MultiChannelChannelListObjectContent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        

    def testMultiChannelChannelListObjectContent(self):
        """Test MultiChannelChannelListObjectContent"""
        model_rbm_message_content_text = MultiChannelChannelListObjectContent(RbmMessageContentText(
            text = 'Hello world',
            suggestions = [
                MultiChannelAction(
                    RbmActionBase(
                        type = 'REPLY',
                        text = 'Hello world',
                        post_back_data = '[B@32298473'
                    )
                )
            ]
        ))
        model_rbm_message_media = MultiChannelChannelListObjectContent(RbmMessageMedia(
            media = RbmMessageContentFile(
                file_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                thumbnail_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png'
            )
        ))
        model_rbm_message_content_rich_card = MultiChannelChannelListObjectContent(RbmMessageContentRichCard(
            RbmStandaloneCard(
            orientation = 'VERTICAL',
                thumbnail_image_alignment = 'LEFT',
                card_content = RbmCardContent(
                    title = 'Bandwidth',
                    description = 'Bandwidth is a communications platform as a service (CPaaS) company.',
                    media = RbmCardContentMedia(
                        file_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                        thumbnail_url = 'https://dev.bandwidth.com/images/bandwidth-logo.png',
                        height = 'SHORT'
                    ),
                    suggestions = [
                        MultiChannelAction(
                            RbmActionBase(
                                type = 'REPLY',
                                text = 'Hello world',
                                post_back_data = '[B@32298473'
                            )
                        )
                    ]
                ),
                suggestions = [
                    MultiChannelAction(
                        RbmActionBase(
                            type = 'REPLY',
                            text = 'Hello world',
                            post_back_data = '[B@32298473'
                        )
                    )
                ]
        )
        ))
        model_sms_message_content = MultiChannelChannelListObjectContent(SmsMessageContent(
            text = 'Hello world'
        ))
        model_mms_message_content = MultiChannelChannelListObjectContent(MmsMessageContent(
            text = 'Hello world',
            media = ["https://dev.bandwidth.com/images/bandwidth-logo.png","https://dev.bandwidth.com/images/github_logo.png"]
        ))

        assert model_rbm_message_content_text is not None
        assert isinstance(model_rbm_message_content_text, MultiChannelChannelListObjectContent)
        assert isinstance(model_rbm_message_content_text.actual_instance, RbmMessageContentText)
        assert model_rbm_message_media is not None
        assert isinstance(model_rbm_message_media, MultiChannelChannelListObjectContent)
        assert isinstance(model_rbm_message_media.actual_instance, RbmMessageMedia)
        assert model_rbm_message_content_rich_card is not None
        assert isinstance(model_rbm_message_content_rich_card, MultiChannelChannelListObjectContent)
        assert isinstance(model_rbm_message_content_rich_card.actual_instance, RbmMessageContentRichCard)
        assert model_sms_message_content is not None
        assert isinstance(model_sms_message_content, MultiChannelChannelListObjectContent)
        assert isinstance(model_sms_message_content.actual_instance, SmsMessageContent)
        assert model_mms_message_content is not None
        assert isinstance(model_mms_message_content, MultiChannelChannelListObjectContent)
        assert isinstance(model_mms_message_content.actual_instance, MmsMessageContent)

if __name__ == '__main__':
    unittest.main()
