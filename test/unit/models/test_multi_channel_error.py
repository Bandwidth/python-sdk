# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bandwidth.models.multi_channel_error import MultiChannelError
from bandwidth.models.error_object import ErrorObject
from bandwidth.models.error_source import ErrorSource

class TestMultiChannelError(unittest.TestCase):
    """MultiChannelError unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiChannelError:
        """Test MultiChannelError
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return MultiChannelError(
                links = [],
                data = None,
                errors = [
                    ErrorObject(
                        type = 'type', 
                        description = 'description', 
                        source = ErrorSource(
                            parameter = 'parameter', 
                            var_field = 'field', 
                            header = 'header', 
                            reference = 'reference', ), )
                    ]
            )
        else:
            return MultiChannelError(
        )

    def testMultiChannelError(self):
        """Test MultiChannelError"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, MultiChannelError)
        assert isinstance(instance.errors, list)
        assert len(instance.errors) > 0
        assert isinstance(instance.errors[0], ErrorObject)
        assert instance.errors[0].type == 'type'
        assert instance.errors[0].description == 'description'
        assert isinstance(instance.errors[0].source, ErrorSource)
        assert instance.errors[0].source.parameter == 'parameter'
        assert instance.errors[0].source.var_field == 'field'
        assert instance.errors[0].source.header == 'header'
        assert instance.errors[0].source.reference == 'reference'

if __name__ == '__main__':
    unittest.main()
