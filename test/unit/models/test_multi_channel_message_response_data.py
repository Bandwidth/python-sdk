# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from datetime import datetime

from bandwidth.models.multi_channel_message_response_data import MultiChannelMessageResponseData
from bandwidth.models.multi_channel_message_response_data_channel_list_inner import MultiChannelMessageResponseDataChannelListInner
from bandwidth.models.multi_channel_channel_list_object_content import MultiChannelChannelListObjectContent

class TestMultiChannelMessageResponseData(unittest.TestCase):
    """MultiChannelMessageResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiChannelMessageResponseData:
        """Test MultiChannelMessageResponseData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return MultiChannelMessageResponseData(
                message_id = '1589228074636lm4k2je7j7jklbn2',
                time = '2025-01-01T18:20:16Z',
                direction = 'in',
                to = ["+15554443333"],
                channel_list = [
                    MultiChannelMessageResponseDataChannelListInner(
                        var_from = 'BandwidthRBM',
                        application_id = '93de2206-9669-4e07-948d-329f4b722ee2',
                        channel = 'RBM',
                        content = MultiChannelChannelListObjectContent(),
                        owner = 'owner',
                )],
                tag = 'custom string',
                priority = 'default',
                expiration = '2021-02-01T11:29:18-05:00'
            )
        else:
            return MultiChannelMessageResponseData(
                message_id = '1589228074636lm4k2je7j7jklbn2',
                time = '2025-01-01T18:20:16Z',
                direction = 'in',
                to = ["+15554443333"],
                channel_list = [],
        )

    def testMultiChannelMessageResponseData(self):
        """Test MultiChannelMessageResponseData"""
        instance = self.make_instance(True)
        assert instance is not None
        assert isinstance(instance, MultiChannelMessageResponseData)
        assert instance.message_id == '1589228074636lm4k2je7j7jklbn2'
        assert isinstance(instance.time, datetime)
        assert instance.direction == 'in'
        assert instance.to == ["+15554443333"]
        assert isinstance(instance.channel_list, list)
        assert len(instance.channel_list) > 0
        assert isinstance(instance.channel_list[0], MultiChannelMessageResponseDataChannelListInner)
        assert instance.tag == 'custom string'
        assert instance.priority == 'default'
        assert isinstance(instance.expiration, datetime)

if __name__ == '__main__':
    unittest.main()
