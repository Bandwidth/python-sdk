"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import os
import unittest

import bandwidth
from hamcrest import *
from bandwidth.api import participants_api, sessions_api
from bandwidth.model.create_participant_request import CreateParticipantRequest
from bandwidth.model.create_participant_response import CreateParticipantResponse
from bandwidth.model.publish_permissions_enum import PublishPermissionsEnum
from bandwidth.model.device_api_version_enum import DeviceApiVersionEnum
from bandwidth.model.participant import Participant


class TestSessionsApi(unittest.TestCase):
    """SessionsApi unit test stubs"""

    def setUp(self):
        # API Client
        configuration = bandwidth.Configuration(
            username = os.environ.get('BW_USERNAME'),
            password = os.environ.get('BW_PASSWORD')
        )
        api_client = bandwidth.ApiClient(configuration)
        self.sessions_api_instance = sessions_api.SessionsApi(api_client)
        self.participants_api_instance = participants_api.ParticipantsApi(api_client)
        self.account_id = os.environ.get('BW_ACCOUNT_ID')

    def test_create_participant(self):
        create_participant_request = CreateParticipantRequest(
            callback_url="https://example.com/callback",
            publish_permissions=[
                PublishPermissionsEnum('AUDIO'),
                PublishPermissionsEnum('VIDEO')
            ],
            tag="participant1",
            device_api_version=DeviceApiVersionEnum("V3"),
        )
        response = self.participants_api_instance.create_participant(self.account_id, create_participant_request=create_participant_request, _return_http_data_only=False)

        self.assertEqual(response[1], 200)
        assert_that

        api_response = response[0]
        self.assertIsInstance(api_response, CreateParticipantResponse)
        self.assertIsInstance(api_response.participant, Participant)
        print(api_response.participant['callback_url'])
        self.assertEqual(api_response.participant.callback_url, create_participant_request.callback_url)
        #self.assertEqual(api_response.publish_permissions, create_participant_request.publish_permissions)

    def test_delete_participant(self):
        """Test case for delete_participant

        Delete Participant  # noqa: E501
        """
        pass

    def test_get_participant(self):
        """Test case for get_participant

        Get Participant  # noqa: E501
        """
        pass
    
    def test_add_participant_to_session(self):
        """Test case for add_participant_to_session

        Add Participant to Session  # noqa: E501
        """
        pass

    def test_create_session(self):
        """Test case for create_session

        Create Session  # noqa: E501
        """
        pass

    def test_delete_session(self):
        """Test case for delete_session

        Delete Session  # noqa: E501
        """
        pass

    def test_get_participant_subscriptions(self):
        """Test case for get_participant_subscriptions

        Get Participant Subscriptions  # noqa: E501
        """
        pass

    def test_get_session(self):
        """Test case for get_session

        Get Session  # noqa: E501
        """
        pass

    def test_list_session_participants(self):
        """Test case for list_session_participants

        List Participants in Session  # noqa: E501
        """
        pass

    def test_remove_participant_from_session(self):
        """Test case for remove_participant_from_session

        Remove Participant from Session  # noqa: E501
        """
        pass

    def test_update_participant_subscriptions(self):
        """Test case for update_participant_subscriptions

        Update Participant Subscriptions  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
