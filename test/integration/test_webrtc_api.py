"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


from array import array
import os
import unittest

import bandwidth
from hamcrest import *
from bandwidth.api import participants_api, sessions_api
from bandwidth.model.create_participant_request import CreateParticipantRequest
from bandwidth.model.create_participant_response import CreateParticipantResponse
from bandwidth.model.publish_permissions_enum import PublishPermissionsEnum
from bandwidth.model.device_api_version_enum import DeviceApiVersionEnum
from bandwidth.model.participant import Participant
from bandwidth.model.session import Session


class TestSessionsApi(unittest.TestCase):
    """SessionsApi unit test stubs"""

    def setUp(self):
        # API Client
        configuration = bandwidth.Configuration(
            username = os.environ.get('BW_USERNAME'),
            password = os.environ.get('BW_PASSWORD')
        )
        api_client = bandwidth.ApiClient(configuration)
        self.sessions_api_instance = sessions_api.SessionsApi(api_client)
        self.participants_api_instance = participants_api.ParticipantsApi(api_client)
        self.account_id = os.environ.get('BW_ACCOUNT_ID')

        # Participant Properties
        self.callback_url = 'https://example.com/callback'
        self.publish_permissions = [
                PublishPermissionsEnum('AUDIO'),
                PublishPermissionsEnum('VIDEO')
            ]
        self.participant_tag = 'python integration participant tag'
        self.device_api_version = DeviceApiVersionEnum('V3')
        self.participant_id = ''

        # Participant Request
        self.create_participant_request = CreateParticipantRequest(
            callback_url=self.callback_url,
            publish_permissions=self.publish_permissions,
            tag=self.participant_tag,
            device_api_version=self.device_api_version
        )

        # Session Properties
        self.session_tag = 'python integration session tag'
        self.session_id = ''

        # Session Request
        self.session = Session(
            tag=self.session_tag
        )

    def test_create_participant(self):
        response = self.participants_api_instance.create_participant(self.account_id, create_participant_request=self.create_participant_request, _return_http_data_only=False)

        assert_that(response[1], equal_to(200))

        assert_that(response[0], instance_of(CreateParticipantResponse))
        assert_that(response[0], has_properties(
                'participant', instance_of(Participant),
                'participant', has_properties(
                    'device_api_version', self.device_api_version,
                    'id', instance_of(str),
                    'publish_permissions', contains_inanyorder(
                        PublishPermissionsEnum('AUDIO'),
                        PublishPermissionsEnum('VIDEO')),
                    'tag', self.participant_tag
                ),
            'token', instance_of(str)
        ))

        self.participant_id = response[0].participant.id
        
    def test_delete_participant(self):
        """Test case for delete_participant

        Delete Participant  # noqa: E501
        """
        pass

    def test_get_participant(self):
        """Test case for get_participant

        Get Participant  # noqa: E501
        """
        pass
    
    def test_add_participant_to_session(self):
        response = self.sessions_api_instance.add_participant_to_session(self.account_id, self.session_id, self.participant_id, _return_http_data_only=False)

        assert_that(response[1], 205)

    def test_create_session(self):
        response = self.sessions_api_instance.create_session(self.account_id, session=self.session, _return_http_data_only=False)

        assert_that(response[1], equal_to(200))

        assert_that(response[0], instance_of(Session))
        assert_that(response[0], has_properties(
            'id', instance_of(str),
            'tag', self.session_tag,
            'participant_ids', instance_of(array),
            'participant_ids', empty()
        ))

        self.session_id = response[0].id

    def test_delete_session(self):
        """Test case for delete_session

        Delete Session  # noqa: E501
        """
        pass

    def test_get_participant_subscriptions(self):
        """Test case for get_participant_subscriptions

        Get Participant Subscriptions  # noqa: E501
        """
        pass

    def test_get_session(self):
        """Test case for get_session

        Get Session  # noqa: E501
        """
        pass

    def test_list_session_participants(self):
        """Test case for list_session_participants

        List Participants in Session  # noqa: E501
        """
        pass

    def test_remove_participant_from_session(self):
        """Test case for remove_participant_from_session

        Remove Participant from Session  # noqa: E501
        """
        pass

    def test_update_participant_subscriptions(self):
        """Test case for update_participant_subscriptions

        Update Participant Subscriptions  # noqa: E501
        """
        pass


    def _steps(self) -> None:
            call_order = ['test_create_participant', 'test_create_session', 'test_add_participant_to_session', 'test_get_session']
            for name in call_order: 
                yield name, getattr(self, name)

    def test_steps(self) -> None:
        """Test each function from _steps.call_order in specified order
        """
        for name, step in self._steps():
            step()

if __name__ == '__main__':
    unittest.main()