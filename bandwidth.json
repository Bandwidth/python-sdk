{
    "openapi": "3.0.3",
    "security": [
        {
            "Basic": []
        }
    ],
    "tags": [
        {
            "name": "Messages"
        },
        {
            "name": "Media"
        },
        {
            "name": "Calls"
        },
        {
            "name": "Conferences"
        },
        {
            "name": "Recordings"
        },
        {
            "name": "Statistics"
        },
        {
            "name": "MFA"
        },
        {
            "name": "Phone Number Lookup"
        },
        {
            "name": "Participants"
        },
        {
            "name": "Sessions"
        }
    ],
    "paths": {
        "/users/{accountId}/media": {
            "get": {
                "summary": "List Media",
                "description": "Gets a list of your media files. No query parameters are supported.",
                "operationId": "listMedia",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    },
                    {
                        "$ref": "#/components/parameters/continuationToken"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listMediaResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/users/{accountId}/media/{mediaId}": {
            "get": {
                "summary": "Get Media",
                "description": "Downloads a media file you previously uploaded.",
                "operationId": "getMedia",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    },
                    {
                        "$ref": "#/components/parameters/mediaId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getMediaResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "put": {
                "summary": "Upload Media",
                "description": "Upload a file. You may add headers to the request in order to provide some control to your media file.",
                "operationId": "uploadMedia",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    },
                    {
                        "$ref": "#/components/parameters/mediaId"
                    },
                    {
                        "$ref": "#/components/parameters/contentType"
                    },
                    {
                        "$ref": "#/components/parameters/cacheControl"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/uploadMediaRequest"
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "summary": "Delete Media",
                "description": "Deletes a media file from Bandwidth API server. Make sure you don't have\nany application scripts still using the media before you delete.\n\nIf you accidentally delete a media file you can immediately upload a new\nfile with the same name.",
                "operationId": "deleteMedia",
                "tags": [
                    "Media"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    },
                    {
                        "$ref": "#/components/parameters/mediaId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/users/{accountId}/messages": {
            "get": {
                "summary": "List Messages",
                "description": "Returns a list of messages based on query parameters.",
                "operationId": "listMessages",
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    },
                    {
                        "$ref": "#/components/parameters/messageId"
                    },
                    {
                        "$ref": "#/components/parameters/sourceTn"
                    },
                    {
                        "$ref": "#/components/parameters/destinationTn"
                    },
                    {
                        "$ref": "#/components/parameters/messageStatus"
                    },
                    {
                        "$ref": "#/components/parameters/messageDirection"
                    },
                    {
                        "$ref": "#/components/parameters/carrierName"
                    },
                    {
                        "$ref": "#/components/parameters/messageType"
                    },
                    {
                        "$ref": "#/components/parameters/errorCode"
                    },
                    {
                        "$ref": "#/components/parameters/fromDateTime"
                    },
                    {
                        "$ref": "#/components/parameters/toDateTime"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/pageToken"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listMessagesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "post": {
                "summary": "Create Message",
                "description": "Endpoint for sending text messages and picture messages using V2 messaging.",
                "operationId": "createMessage",
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/createMessageRequest"
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/createMessageResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/messagingBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/messagingUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/messagingForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/messagingNotFoundError"
                    },
                    "415": {
                        "$ref": "#/components/responses/messagingInvalidMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/messagingTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/messagingInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://messaging.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls": {
            "post": {
                "tags": [
                    "Calls"
                ],
                "summary": "Create Call",
                "description": "Creates an outbound phone call.\n\nAll calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \"fire and forget\" when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.\n\n<b>Please note:</b> Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.",
                "operationId": "createCall",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/createCallRequest"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/createCallResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}": {
            "get": {
                "tags": [
                    "Calls"
                ],
                "summary": "Get Call State Information",
                "description": "Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.\n\n**Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.",
                "operationId": "getCallState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getCallStateResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Calls"
                ],
                "summary": "Update Call",
                "description": "Interrupts and redirects a call to a different URL that should return a BXML document.",
                "operationId": "updateCall",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateCallRequest"
                },
                "responses": {
                    "200": {
                        "description": "Call Successfully Modified"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/bxml": {
            "put": {
                "tags": [
                    "Calls"
                ],
                "summary": "Update Call BXML",
                "description": "Interrupts and replaces an active call's BXML document.",
                "operationId": "updateCallBxml",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateCallBxmlRequest"
                },
                "responses": {
                    "204": {
                        "description": "Call BXML Successfully Replaced"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Get Conferences",
                "description": "Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.\n\n**NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.",
                "operationId": "listConferences",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/name"
                    },
                    {
                        "$ref": "#/components/parameters/minCreatedTime"
                    },
                    {
                        "$ref": "#/components/parameters/maxCreatedTime"
                    },
                    {
                        "$ref": "#/components/parameters/pageSize"
                    },
                    {
                        "$ref": "#/components/parameters/pageToken1"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listConferencesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Get Conference Information",
                "description": "Returns information about the specified conference.",
                "operationId": "getConference",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getConferenceResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Update Conference",
                "description": "Update the conference state.",
                "operationId": "updateConference",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateConferenceRequest"
                },
                "responses": {
                    "204": {
                        "description": "Conference successfully modified"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}/bxml": {
            "put": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Update Conference BXML",
                "description": "Update the conference BXML document.",
                "operationId": "updateConferenceBxml",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateConferenceBxmlRequest"
                },
                "responses": {
                    "204": {
                        "description": "Conference successfully modified"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Get Conference Member",
                "description": "Returns information about the specified conference member.",
                "operationId": "getConferenceMember",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    },
                    {
                        "$ref": "#/components/parameters/memberId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getConferenceMemberResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Update Conference Member",
                "description": "Updates settings for a particular conference member.",
                "operationId": "updateConferenceMember",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    },
                    {
                        "$ref": "#/components/parameters/memberId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateConferenceMemberRequest"
                },
                "responses": {
                    "204": {
                        "description": "Conference member successfully modified"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}/recordings": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Get Conference Recordings",
                "description": "Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.",
                "operationId": "listConferenceRecordings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listConferenceRecordingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Get Conference Recording Information",
                "description": "Returns metadata for the specified recording.",
                "operationId": "getConferenceRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getConferenceRecordingResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media": {
            "get": {
                "tags": [
                    "Conferences"
                ],
                "summary": "Download Conference Recording",
                "description": "Downloads the specified recording file.",
                "operationId": "downloadConferenceRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/conferenceId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/downloadCallRecordingResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/recordings": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Get Call Recordings",
                "description": "Returns a list of metadata for the recordings associated with the\nspecified account. The list can be filtered by the optional from, to, minStartTime,\nand maxStartTime arguments. The list is capped at 1000 entries and may be\nempty if no recordings match the specified criteria.",
                "operationId": "listAccountCallRecordings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/to"
                    },
                    {
                        "$ref": "#/components/parameters/from"
                    },
                    {
                        "$ref": "#/components/parameters/minStartTime"
                    },
                    {
                        "$ref": "#/components/parameters/maxStartTime"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listCallRecordingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/recording": {
            "put": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Update Recording",
                "description": "Pause or resume a recording on an active phone call.",
                "operationId": "updateCallRecordingState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateCallRecordingRequest"
                },
                "responses": {
                    "200": {
                        "description": "Recording state successfully modified"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/recordings": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "List Call Recordings",
                "description": "Returns a (potentially empty) list of metadata for the recordings\nthat took place during the specified call.",
                "operationId": "listCallRecordings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listCallRecordingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Get Call Recording",
                "description": "Returns metadata for the specified recording.",
                "operationId": "getCallRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getCallRecordingResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Delete Recording",
                "description": "Delete the recording information, media and transcription.\n\nNote: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.",
                "operationId": "deleteRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Recording Deleted"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Download Recording",
                "description": "Downloads the specified recording.",
                "operationId": "downloadCallRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/downloadCallRecordingResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Delete Recording Media",
                "description": "Deletes the specified recording's media.",
                "operationId": "deleteRecordingMedia",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The recording media was successfully deleted"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription": {
            "get": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Get Transcription",
                "description": "Downloads the specified transcription.\n\nIf the transcribed recording was multi-channel, then there will be 2 transcripts.\nThe caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item.\nDuring a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.",
                "operationId": "getCallTranscription",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getCallTranscriptionResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Create Transcription Request",
                "description": "Generate the transcription for a specific recording. Transcription\ncan succeed only for recordings of length greater than 500 milliseconds and\nless than 4 hours.",
                "operationId": "transcribeCallRecording",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/transcribeRecordingRequest"
                },
                "responses": {
                    "204": {
                        "description": "Transcription successfully requested"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Recordings"
                ],
                "summary": "Delete Transcription",
                "description": "Deletes the specified recording's transcription.\n\nNote: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.",
                "operationId": "deleteCallTranscription",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    },
                    {
                        "$ref": "#/components/parameters/callId"
                    },
                    {
                        "$ref": "#/components/parameters/recordingId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The transcription was successfully deleted"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/statistics": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get Account Statistics",
                "description": "Returns details about the current state of the account.",
                "operationId": "getStatistics",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId1"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getStatisticsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/voiceBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/voiceUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/voiceForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/voiceNotFoundError"
                    },
                    "405": {
                        "$ref": "#/components/responses/voiceNotAllowedError"
                    },
                    "415": {
                        "$ref": "#/components/responses/voiceUnsupportedMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/voiceTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/voiceInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://voice.bandwidth.com/api/v2",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/code/voice": {
            "post": {
                "tags": [
                    "MFA"
                ],
                "summary": "Voice Authentication Code",
                "description": "Send an MFA Code via a phone call.",
                "operationId": "generateVoiceCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId2"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/codeRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/voiceCodeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/mfaBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/mfaUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/mfaForbiddenError"
                    },
                    "500": {
                        "$ref": "#/components/responses/mfaInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://mfa.bandwidth.com/api/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/code/messaging": {
            "post": {
                "tags": [
                    "MFA"
                ],
                "summary": "Messaging Authentication Code",
                "description": "Send an MFA code via text message (SMS).",
                "operationId": "generateMessagingCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId2"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/codeRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/messagingCodeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/mfaBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/mfaUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/mfaForbiddenError"
                    },
                    "500": {
                        "$ref": "#/components/responses/mfaInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://mfa.bandwidth.com/api/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/code/verify": {
            "post": {
                "tags": [
                    "MFA"
                ],
                "summary": "Verify Authentication Code",
                "description": "Verify a previously sent MFA code.",
                "operationId": "verifyCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId2"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/codeVerify"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/verifyCodeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/mfaBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/mfaUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/mfaForbiddenError"
                    },
                    "429": {
                        "$ref": "#/components/responses/mfaTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/mfaInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://mfa.bandwidth.com/api/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/tnlookup": {
            "post": {
                "summary": "Create Lookup",
                "description": "Create a Phone Number Lookup Request.",
                "operationId": "createLookup",
                "tags": [
                    "Phone Number Lookup"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId3"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/createLookupRequest"
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/createLookupResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/tnLookupBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/tnLookupUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/tnLookupForbiddenError"
                    },
                    "415": {
                        "$ref": "#/components/responses/tnLookupMediaTypeError"
                    },
                    "429": {
                        "$ref": "#/components/responses/tnLookupTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/tnLookupInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://numbers.bandwidth.com/api/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/tnlookup/{requestId}": {
            "get": {
                "summary": "Get Lookup Request Status",
                "description": "Get an existing Phone Number Lookup Request.",
                "operationId": "getLookupStatus",
                "tags": [
                    "Phone Number Lookup"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId3"
                    },
                    {
                        "$ref": "#/components/parameters/requestId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getLookupResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/tnLookupBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/tnLookupUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/tnLookupForbiddenError"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "$ref": "#/components/responses/tnLookupTooManyRequestsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/tnLookupInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://numbers.bandwidth.com/api/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/participants": {
            "post": {
                "tags": [
                    "Participants"
                ],
                "summary": "Create Participant",
                "description": "Create a new participant under this account. Participants are idempotent, so relevant parameters must be set in this function if desired.",
                "operationId": "createParticipant",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/createParticipantRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/createParticipantResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/participants/{participantId}": {
            "get": {
                "tags": [
                    "Participants"
                ],
                "summary": "Get Participant",
                "description": "Get participant by ID.",
                "operationId": "getParticipant",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getParticipantResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Participants"
                ],
                "summary": "Delete Participant",
                "description": "Delete participant by ID.",
                "operationId": "deleteParticipant",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Create Session",
                "description": "Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.",
                "operationId": "createSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/createSessionRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/sessionResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get Session",
                "description": "Get session by ID.",
                "operationId": "getSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/sessionResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete Session",
                "description": "Delete session by ID.",
                "operationId": "deleteSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "List Participants in Session",
                "description": "List participants in a session.",
                "operationId": "listSessionParticipants",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/listSessionParticipantsResponse"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}": {
            "put": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Add Participant to Session",
                "description": "Add a participant to a session.\n\nSubscriptions can optionally be provided as part of this call.\n",
                "operationId": "addParticipantToSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/addParticipantToSessionRequest"
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "409": {
                        "$ref": "#/components/responses/webrtcConflictError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Remove Participant from Session",
                "description": "Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.",
                "operationId": "removeParticipantFromSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get Participant Subscriptions",
                "description": "Get a participant's subscriptions.",
                "operationId": "getParticipantSubscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/getParticipantSubscriptionsResponse"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Update Participant Subscriptions",
                "description": "Update a participant's subscriptions. This is a full update that will replace the participant's subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants.\nFirst call `getParticipantSubscriptions` if you need the current subscriptions.\nCalling this API with no `Subscriptions` object to remove all subscriptions.",
                "operationId": "updateParticipantSubscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/accountId4"
                    },
                    {
                        "$ref": "#/components/parameters/sessionId"
                    },
                    {
                        "$ref": "#/components/parameters/participantId"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateParticipantSubscriptionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/webrtcBadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/webrtcUnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/webrtcForbiddenError"
                    },
                    "404": {
                        "$ref": "#/components/responses/webrtcNotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/webrtcInternalServerError"
                    }
                },
                "servers": [
                    {
                        "url": "https://api.webrtc.bandwidth.com/v1",
                        "description": "Production"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "priorityEnum": {
                "type": "string",
                "description": "The priority specified by the user.",
                "enum": [
                    "DEFAULT",
                    "HIGH"
                ],
                "example": "DEFAULT"
            },
            "messageStatusEnum": {
                "type": "string",
                "description": "The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED.",
                "enum": [
                    "RECEIVED",
                    "QUEUED",
                    "SENDING",
                    "SENT",
                    "FAILED",
                    "DELIVERED",
                    "ACCEPTED",
                    "UNDELIVERED"
                ],
                "example": "RECEIVED"
            },
            "listMessageDirectionEnum": {
                "type": "string",
                "description": "The direction of the message. One of INBOUND OUTBOUND.",
                "enum": [
                    "INBOUND",
                    "OUTBOUND"
                ]
            },
            "messageDirectionEnum": {
                "type": "string",
                "description": "The direction of the message. One of in out.",
                "enum": [
                    "in",
                    "out"
                ]
            },
            "messageTypeEnum": {
                "type": "string",
                "description": "The type of message. Either SMS or MMS.",
                "enum": [
                    "sms",
                    "mms"
                ],
                "example": "sms"
            },
            "messagesList": {
                "title": "MessagesList",
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of messages matched by the search.",
                        "example": 100
                    },
                    "pageInfo": {
                        "$ref": "#/components/schemas/pageInfo"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/listMessageItem"
                        }
                    }
                }
            },
            "listMessageItem": {
                "title": "listMessageItem",
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message id",
                        "example": "1589228074636lm4k2je7j7jklbn2"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "The account id associated with this message.",
                        "example": "9900000"
                    },
                    "sourceTn": {
                        "type": "string",
                        "description": "The source phone number of the message.",
                        "example": "+15554443333"
                    },
                    "destinationTn": {
                        "type": "string",
                        "description": "The recipient phone number of the message.",
                        "example": "+15554442222"
                    },
                    "messageStatus": {
                        "$ref": "#/components/schemas/messageStatusEnum"
                    },
                    "messageDirection": {
                        "$ref": "#/components/schemas/listMessageDirectionEnum"
                    },
                    "messageType": {
                        "$ref": "#/components/schemas/messageTypeEnum"
                    },
                    "segmentCount": {
                        "type": "integer",
                        "description": "The number of segments the message was sent as.",
                        "example": 1
                    },
                    "errorCode": {
                        "type": "integer",
                        "description": "The numeric error code of the message.",
                        "example": 9902
                    },
                    "receiveTime": {
                        "type": "string",
                        "description": "The ISO 8601 datetime of the message.",
                        "example": "2020-04-07T14:03:07.000Z"
                    },
                    "carrierName": {
                        "type": "string",
                        "description": "The name of the carrier. Not currently supported for MMS coming soon.",
                        "example": "other"
                    },
                    "messageSize": {
                        "type": "integer",
                        "description": "The size of the message including message content and headers.",
                        "example": 27
                    },
                    "messageLength": {
                        "type": "integer",
                        "description": "The length of the message content.",
                        "example": 18
                    },
                    "attachmentCount": {
                        "type": "integer",
                        "description": "The number of attachments the message has.",
                        "example": 1
                    },
                    "recipientCount": {
                        "type": "integer",
                        "description": "The number of recipients the message has.",
                        "example": 1
                    },
                    "campaignClass": {
                        "type": "string",
                        "description": "The campaign class of the message if it has one.",
                        "example": "T"
                    }
                }
            },
            "pageInfo": {
                "title": "PageInfo",
                "type": "object",
                "properties": {
                    "prevPage": {
                        "type": "string",
                        "description": "The link to the previous page for pagination.",
                        "example": "https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED&nextPage=DLAPE902"
                    },
                    "nextPage": {
                        "type": "string",
                        "description": "The link to the next page for pagination.",
                        "example": "https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED&prevPage=GL83PD3C"
                    },
                    "prevPageToken": {
                        "type": "string",
                        "description": "The isolated pagination token for the previous page.",
                        "example": "DLAPE902"
                    },
                    "nextPageToken": {
                        "type": "string",
                        "description": "The isolated pagination token for the next page.",
                        "example": "GL83PD3C"
                    }
                }
            },
            "messagingRequestError": {
                "title": "MessagingRequestError",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "description"
                ]
            },
            "media": {
                "title": "Media",
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "contentLength": {
                        "type": "integer"
                    },
                    "mediaName": {
                        "type": "string"
                    }
                }
            },
            "tag": {
                "title": "Tag",
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "deferredResult": {
                "title": "DeferredResult",
                "type": "object",
                "properties": {
                    "result": {
                        "type": "object"
                    },
                    "setOrExpired": {
                        "type": "boolean"
                    }
                }
            },
            "message": {
                "title": "Message",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the message.",
                        "example": "1589228074636lm4k2je7j7jklbn2"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The Bandwidth phone number associated with the message.",
                        "example": "+15554443333"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The application ID associated with the message.",
                        "example": "93de2206-9669-4e07-948d-329f4b722ee2"
                    },
                    "time": {
                        "type": "string",
                        "description": "The datetime stamp of the message in ISO 8601",
                        "example": "2016-09-14T18:20:16.000Z"
                    },
                    "segmentCount": {
                        "type": "integer",
                        "description": "The number of segments the original message from the user is broken into before sending over to carrier networks.",
                        "example": 2
                    },
                    "direction": {
                        "$ref": "#/components/schemas/messageDirectionEnum"
                    },
                    "to": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The phone number recipients of the message.",
                        "example": [
                            "+15552223333"
                        ]
                    },
                    "from": {
                        "type": "string",
                        "description": "The phone number the message was sent from.",
                        "example": "+15553332222"
                    },
                    "media": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of media URLs sent in the message. Including a `filename` field in the `Content-Disposition` header of the media linked with a URL will set the displayed file name. This is a best practice to ensure that your media has a readable file name.",
                        "example": [
                            "https://dev.bandwidth.com/images/bandwidth-logo.png"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "The contents of the message.",
                        "example": "Hello world"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The custom string set by the user.",
                        "example": "custom tag"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/priorityEnum"
                    }
                }
            },
            "messageRequest": {
                "title": "MessageRequest",
                "type": "object",
                "required": [
                    "applicationId",
                    "to",
                    "from"
                ],
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.",
                        "example": "93de2206-9669-4e07-948d-329f4b722ee2"
                    },
                    "to": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The phone number(s) the message should be sent to in E164 format.",
                        "example": [
                            "+15554443333",
                            "+15552223333"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "from": {
                        "type": "string",
                        "description": "One of your telephone numbers the message should come from in E164 format.",
                        "example": "+15551113333"
                    },
                    "text": {
                        "type": "string",
                        "description": "The contents of the text message. Must be 2048 characters or less.",
                        "maxLength": 2048,
                        "example": "Hello world"
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "A list of URLs to include as media attachments as part of the message.",
                        "example": [
                            "https://dev.bandwidth.com/images/bandwidth-logo.png",
                            "https://dev.bandwidth.com/images/github_logo.png"
                        ]
                    },
                    "tag": {
                        "type": "string",
                        "description": "A custom string that will be included in callback events of the message. Max 1024 characters.",
                        "example": "custom string"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/priorityEnum"
                    },
                    "expiration": {
                        "type": "string",
                        "description": "A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00.",
                        "example": "2021-02-01T11:29:18-05:00"
                    }
                }
            },
            "callbackMethodEnum": {
                "type": "string",
                "nullable": true,
                "default": "POST",
                "enum": [
                    "GET",
                    "POST"
                ],
                "description": "The HTTP method to use to deliver the callback. GET or POST. Default value is POST.",
                "example": "POST"
            },
            "redirectMethodEnum": {
                "type": "string",
                "nullable": true,
                "default": "POST",
                "enum": [
                    "GET",
                    "POST"
                ],
                "description": "The HTTP method to use for the request to `redirectUrl`. GET\nor POST. Default value is POST.<br><br>Not allowed if `state` is `completed`",
                "example": "POST"
            },
            "recordingStateEnum": {
                "type": "string",
                "enum": [
                    "paused",
                    "recording"
                ],
                "description": "The recording state. Possible values:\n\n`paused` to pause an active recording\n\n`recording` to resume a paused recording"
            },
            "callDirectionEnum": {
                "type": "string",
                "enum": [
                    "inbound",
                    "outbound"
                ],
                "description": "The direction of the call."
            },
            "fileFormatEnum": {
                "type": "string",
                "enum": [
                    "mp3",
                    "wav"
                ],
                "description": "The format that the recording is stored in"
            },
            "callStateEnum": {
                "nullable": true,
                "type": "string",
                "default": "active",
                "enum": [
                    "active",
                    "completed"
                ],
                "description": "The call state. Possible values:<br>`active` to redirect the\ncall (default)<br>`completed` to hang up the call if it is answered, cancel\nit if it is an unanswered outbound call, or reject it if it an unanswered\ninbound call"
            },
            "conferenceStateEnum": {
                "nullable": true,
                "type": "string",
                "default": "active",
                "enum": [
                    "active",
                    "completed"
                ],
                "description": "Setting the conference state to `completed` ends the conference and ejects all members"
            },
            "machineDetectionModeEnum": {
                "type": "string",
                "default": "async",
                "enum": [
                    "sync",
                    "async"
                ],
                "description": "The machine detection mode. If set to 'async', the detection\nresult will be sent in a 'machineDetectionComplete' callback. If set to\n'sync', the 'answer' callback will wait for the machine detection to complete\nand will include its result."
            },
            "username": {
                "type": "string",
                "nullable": true,
                "description": "Basic auth username.",
                "example": "mySecretUsername"
            },
            "password": {
                "type": "string",
                "nullable": true,
                "description": "Basic auth password.",
                "example": "mySecretPassword1!"
            },
            "createCall": {
                "type": "object",
                "required": [
                    "answerUrl",
                    "applicationId",
                    "from",
                    "to"
                ],
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The destination to call (must be an E.164 formatted number\n(e.g. `+15555551212`) or a SIP URI (e.g. `sip:user@server.com`)).",
                        "example": "+19195551234"
                    },
                    "from": {
                        "type": "string",
                        "description": "A Bandwidth phone number on your account the call should come\nfrom (must be in E.164 format, like `+15555551212`, or be one of the following\nstrings: `Restricted`, `Anonymous`, `Private`, or `Unavailable`).",
                        "example": "+19195554321"
                    },
                    "uui": {
                        "nullable": true,
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiJ9.WyJoaSJd.-znkjYyCkgz4djmHUPSXl9YrJ6Nix_XvmlwKGFh5ERM;encoding=jwt,aGVsbG8gd29ybGQ=;encoding=base64",
                        "description": "A comma-separated list of 'User-To-User' headers to be sent\nin the INVITE when calling a SIP URI. Each value must end with an 'encoding'\nparameter as described in <a href='https://tools.ietf.org/html/rfc7433'>RFC\n7433</a>. Only 'jwt' and 'base64' encodings are allowed. The entire value\ncannot exceed 350 characters, including parameters and separators."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The id of the application associated with the `from` number.",
                        "example": "1234-qwer-5679-tyui"
                    },
                    "answerUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "The full URL to send the <a href='/docs/voice/webhooks/answer'>Answer</a>\nevent to when the called party answers. This endpoint should return the\nfirst <a href='/docs/voice/bxml'>BXML document</a> to be executed in the\ncall.\n\nMust use `https` if specifying `username` and `password`",
                        "example": "https://www.myCallbackServer.com/webhooks/answer"
                    },
                    "answerMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "answerFallbackUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "A fallback url which, if provided, will be used to retry the\n`answer` webhook delivery in case `answerUrl` fails to respond\n\nMust use `https` if specifying `fallbackUsername` and `fallbackPassword`",
                        "example": "https://www.myFallbackServer.com/webhooks/answer"
                    },
                    "answerFallbackMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "fallbackUsername": {
                        "$ref": "#/components/schemas/username"
                    },
                    "fallbackPassword": {
                        "$ref": "#/components/schemas/password"
                    },
                    "disconnectUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "The URL to send the <a href='/docs/voice/webhooks/disconnect'>Disconnect</a> event to when the call ends. This event does not expect a BXML response."
                    },
                    "disconnectMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "callTimeout": {
                        "nullable": true,
                        "type": "number",
                        "format": "double",
                        "description": "The timeout (in seconds) for the callee to answer the call\nafter it starts ringing. If the call does not start ringing within 30s,\nthe call will be cancelled regardless of this value.  Can be any numeric\nvalue (including decimals) between 1 and 300.",
                        "minimum": 1,
                        "maximum": 300,
                        "default": 30
                    },
                    "callbackTimeout": {
                        "nullable": true,
                        "type": "number",
                        "format": "double",
                        "description": "This is the timeout (in seconds) to use when delivering webhooks\nfor the call. Can be any numeric value (including decimals) between 1\nand 25.",
                        "minimum": 1,
                        "maximum": 25,
                        "default": 15
                    },
                    "machineDetection": {
                        "$ref": "#/components/schemas/machineDetectionConfiguration"
                    },
                    "priority": {
                        "nullable": true,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 5,
                        "default": 5,
                        "description": "The priority of this call over other calls from your account. For example, if during a call\nyour application needs to place a new call and bridge it with the current\ncall, you might want to create the call with priority 1 so that it will\nbe the next call picked off your queue, ahead of other less time sensitive\ncalls. A lower value means higher priority, so a priority 1 call takes\nprecedence over a priority 2 call."
                    },
                    "tag": {
                        "nullable": true,
                        "type": "string",
                        "description": "A custom string that will be sent with all webhooks for this\ncall unless overwritten by a future <a href='/docs/voice/bxml/tag'>`<Tag>`</a>\nverb or `tag` attribute on another verb, or cleared.\n\nMay be cleared by setting `tag=\"\"`\n\nMax length 256 characters.",
                        "maximum": 256
                    }
                }
            },
            "createCallResponse": {
                "type": "object",
                "required": [
                    "accountId",
                    "answerMethod",
                    "answerUrl",
                    "applicationId",
                    "callId",
                    "callUrl",
                    "disconnectMethod",
                    "from",
                    "to"
                ],
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "example": "04e88489-df02-4e34-a0ee-27a91849555f",
                        "description": "The id of the application associated with the `from` number."
                    },
                    "accountId": {
                        "type": "string",
                        "example": "9900000",
                        "description": "The bandwidth account ID associated with the call"
                    },
                    "callId": {
                        "type": "string",
                        "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                        "description": "Programmable Voice API Call ID"
                    },
                    "to": {
                        "type": "string",
                        "example": "+19195551234",
                        "description": "Recipient of the outgoing call"
                    },
                    "from": {
                        "type": "string",
                        "example": "+19195554321",
                        "description": "Phone number that created the outbound call"
                    },
                    "enqueuedTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "Time the call was accepted into the queue",
                        "example": "2022-06-16T13:15:07.160Z"
                    },
                    "callUrl": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                        "description": "The URL to update call state"
                    },
                    "callTimeout": {
                        "type": "number",
                        "format": "double",
                        "example": 30,
                        "description": "The timeout (in seconds) for the callee to answer the call after it starts ringing."
                    },
                    "callbackTimeout": {
                        "type": "number",
                        "format": "double",
                        "example": 15,
                        "description": "This is the timeout (in seconds) to use when delivering webhooks for the call."
                    },
                    "tag": {
                        "nullable": true,
                        "type": "string",
                        "example": "My custom tag value",
                        "description": "Custom tag value"
                    },
                    "answerMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "answerUrl": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://myServer.com/bandwidth/webhooks/answer",
                        "description": "URL to deliver the `answer` event webhook."
                    },
                    "answerFallbackMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "answerFallbackUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "example": "https://myFallbackServer.com/bandwidth/webhooks/answer",
                        "description": "Fallback URL to deliver the `answer` event webhook."
                    },
                    "disconnectMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "disconnectUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "example": "https://myServer.com/bandwidth/webhooks/disconnect",
                        "description": "URL to deliver the `disconnect` event webhook."
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "fallbackUsername": {
                        "$ref": "#/components/schemas/username"
                    },
                    "fallbackPassword": {
                        "$ref": "#/components/schemas/password"
                    },
                    "priority": {
                        "nullable": true,
                        "type": "number",
                        "format": "integer",
                        "example": 5,
                        "description": "The priority of this call over other calls from your account."
                    }
                }
            },
            "callState": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The application id associated with the call.",
                        "example": "04e88489-df02-4e34-a0ee-27a91849555f"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "The account id associated with the call.",
                        "example": "9900000"
                    },
                    "callId": {
                        "type": "string",
                        "description": "The programmable voice API call ID.",
                        "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "parentCallId": {
                        "nullable": true,
                        "type": "string",
                        "description": "The A-leg call id, set only if this call is the B-leg of a [`<Transfer>`](/docs/voice/bxml/transfer).",
                        "example": "c-25ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "to": {
                        "type": "string",
                        "description": "The phone number that received the call, in E.164 format (e.g. +15555555555), or if the call was to a SIP URI, the SIP URI",
                        "example": "+19195551234"
                    },
                    "from": {
                        "type": "string",
                        "description": "The phone number that made the call, in E.164 format (e.g. +15555555555).",
                        "example": "19195554321"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/callDirectionEnum"
                    },
                    "state": {
                        "description": "The current state of the call. Current possible values are\n`queued`, `initiated`, `answered` and `disconnected`. Additional states\nmay be added in the future, so your application must be tolerant of unknown\nvalues.",
                        "type": "string",
                        "example": "disconnected"
                    },
                    "stirShaken": {
                        "nullable": true,
                        "type": "object",
                        "description": "For inbound calls, the Bandwidth STIR/SHAKEN implementation will verify the information provided in the inbound invite request `Identity` header.\nThe verification status is stored in the call state `stirShaken` property as follows.\n\n| Property          | Description |\n|:------------------|:------------|\n| verstat | (optional) The verification status indicating whether the verification was successful or not. Possible values are `TN-Verification-Passed` or `TN-Verification-Failed`. |\n| attestationIndicator | (optional) The attestation level verified by Bandwidth. Possible values are `A` (full), `B` (partial) or `C` (gateway). |\n| originatingId | (optional) A unique origination identifier. |\n\nNote that these are common properties but that the `stirShaken` object is free form and can contain other key-value pairs.\n\nMore information: [Understanding STIR/SHAKEN](https://www.bandwidth.com/regulations/stir-shaken)",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "verstat": "TN-Verification-Passed",
                            "attestationIndicator": "A",
                            "originatingId": "abc123"
                        }
                    },
                    "identity": {
                        "nullable": true,
                        "type": "string",
                        "description": "The value of the `Identity` header from the inbound invite\nrequest. Only present for inbound calls and if the account is configured\nto forward this header.",
                        "example": "eyJhbGciOiJFUzI1NiIsInBwdCI6InNoYWtlbiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9idy1zaGFrZW4tY2VydC1wdWIuczMuYW1hem9uYXdzLmNvbS9iYW5kd2lkdGgtc2hha2VuLWNlcnRfMjAyMzA3MTYucGVtIn0.eyJhdHRlc3QiOiJBIiwiZGVzdCI6eyJ0biI6WyIxOTg0MjgyMDI4MCJdfSwiaWF0IjoxNjU2NTM0MzM2LCJvcmlnIjp7InRuIjoiMTkxOTQ0NDI2ODMifSwib3JpZ2lkIjoiNDk0NTlhOGEtNDJmNi0zNTFjLTkzNjEtYWRmNTdhOWUwOGNhIn0.56un9sRw_uH-sbJvnUsqdevlVxbOVjn8MVlGTlBMicjaZuRRwxfiNp-C9zYCMKTTCbc-QdYPN05F61XNVN4D3w;info=<https://bw-shaken-cert-pub.s3.amazonaws.com/bandwidth-shaken-cert_20230716.pem>;alg=ES256;ppt=shaken"
                    },
                    "enqueuedTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "The time this call was placed in queue.",
                        "example": "2022-06-16T13:15:07.160Z"
                    },
                    "startTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "The time the call was initiated, in ISO 8601 format. `null` if the call is still in your queue.",
                        "example": "2022-06-16T13:15:07.160Z"
                    },
                    "answerTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "Populated once the call has been answered, with the time in ISO 8601 format.",
                        "example": "2022-06-16T13:15:18.126Z"
                    },
                    "endTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "Populated once the call has ended, with the time in ISO 8601 format.",
                        "example": "2022-06-16T13:15:18.314Z"
                    },
                    "disconnectCause": {
                        "nullable": true,
                        "type": "string",
                        "description": "| Cause | Description |\n|:------|:------------|\n| `hangup`| One party hung up the call, a [`<Hangup>`](../../bxml/verbs/hangup.md) verb was executed, or there was no more BXML to execute; it indicates that the call ended normally. |\n| `busy` | Callee was busy. |\n| `timeout` | Call wasn't answered before the `callTimeout` was reached. |\n| `cancel` | Call was cancelled by its originator while it was ringing. |\n| `rejected` | Call was rejected by the callee. |\n| `callback-error` | BXML callback couldn't be delivered to your callback server. |\n| `invalid-bxml` | Invalid BXML was returned in response to a callback. |\n| `application-error` | An unsupported action was tried on the call, e.g. trying to play a .ogg audio. |\n| `account-limit` | Account rate limits were reached. |\n| `node-capacity-exceeded` | System maximum capacity was reached. |\n| `error` | Some error not described in any of the other causes happened on the call. |\n| `unknown` | Unknown error happened on the call. |\n\nNote: This list is not exhaustive and other values can appear in the future."
                    },
                    "errorMessage": {
                        "nullable": true,
                        "type": "string",
                        "description": "Populated only if the call ended with an error, with text explaining the reason.",
                        "example": null
                    },
                    "errorId": {
                        "nullable": true,
                        "type": "string",
                        "description": "Populated only if the call ended with an error, with a Bandwidth internal id that references the error event.",
                        "example": null
                    },
                    "lastUpdate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The last time the call had a state update, in ISO 8601 format.",
                        "example": "2022-06-16T13:15:18.314Z"
                    }
                }
            },
            "updateCall": {
                "type": "object",
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/callStateEnum"
                    },
                    "redirectUrl": {
                        "description": "The URL to send the [Redirect](/docs/voice/bxml/redirect) event\nto which will provide new BXML.\n\nRequired if `state` is `active`.\n\nNot allowed if `state` is `completed`.",
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "example": "https://myServer.com/bandwidth/webhooks/redirect"
                    },
                    "redirectMethod": {
                        "$ref": "#/components/schemas/redirectMethodEnum"
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "redirectFallbackUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "A fallback url which, if provided, will be used to retry the\nredirect callback delivery in case `redirectUrl` fails to respond",
                        "example": "https://myFallbackServer.com/bandwidth/webhooks/redirect"
                    },
                    "redirectFallbackMethod": {
                        "$ref": "#/components/schemas/redirectMethodEnum"
                    },
                    "fallbackUsername": {
                        "$ref": "#/components/schemas/username"
                    },
                    "fallbackPassword": {
                        "$ref": "#/components/schemas/password"
                    },
                    "tag": {
                        "nullable": true,
                        "type": "string",
                        "description": "A custom string that will be sent with this and all future\ncallbacks unless overwritten by a future `tag` attribute or [`<Tag>`](/docs/voice/bxml/tag)\nverb, or cleared.\n\nMay be cleared by setting `tag=\"\"`.\n\nMax length 256 characters.\n\nNot allowed if `state` is `completed`.",
                        "maximum": 256,
                        "example": "My Custom Tag"
                    }
                }
            },
            "updateCallRecording": {
                "type": "object",
                "required": [
                    "state"
                ],
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/recordingStateEnum"
                    }
                }
            },
            "accountStatistics": {
                "type": "object",
                "properties": {
                    "currentCallQueueSize": {
                        "type": "integer",
                        "description": "The number of calls currently enqueued.",
                        "example": 0
                    },
                    "maxCallQueueSize": {
                        "type": "integer",
                        "description": "The maximum size of the queue before outgoing calls start being rejected.",
                        "example": 900
                    }
                }
            },
            "callRecordingMetadata": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The `applicationId` associated with the call",
                        "example": "04e88489-df02-4e34-a0ee-27a91849555f"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "The account that placed the call",
                        "example": "9900000"
                    },
                    "callId": {
                        "type": "string",
                        "description": "The `callId` of the call that created this recording",
                        "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "parentCallId": {
                        "nullable": true,
                        "type": "string",
                        "description": "If the call was a transferred leg, this field contains the `callId` of the call that executed the [`<Transfer>`](/docs/voice/bxml/transfer)",
                        "example": "c-25ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "recordingId": {
                        "type": "string",
                        "description": "The recording's unique ID",
                        "example": "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "to": {
                        "type": "string",
                        "description": "The phone number that received the call, in E.164 format (e.g. +15555555555), or if the call was to a SIP URI, the SIP URI",
                        "example": "+19195551234"
                    },
                    "from": {
                        "type": "string",
                        "description": "The phone number that made the call, in E.164 format (e.g. +15555555555).",
                        "example": "+19195554321"
                    },
                    "transferCallerId": {
                        "nullable": true,
                        "type": "string",
                        "description": "If the call was a transferred leg, the `transferCallerId` field from the [`<Transfer>`](/docs/voice/bxml/transfer), if any.",
                        "example": "+12125551234"
                    },
                    "transferTo": {
                        "nullable": true,
                        "type": "string",
                        "description": "If the call was a transferred leg, the number that the call was transferred to",
                        "example": "+12125554321"
                    },
                    "duration": {
                        "type": "string",
                        "description": "The duration of the recording in ISO-8601 format",
                        "example": "PT2.998S"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/callDirectionEnum"
                    },
                    "channels": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of channels in the recording. Either `1` or `2`",
                        "example": 1
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the recording started in ISO 8601 format",
                        "example": "2022-06-16T13:15:07.160Z"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the recording ended in ISO 8601 format",
                        "example": "2022-06-16T13:15:18.314Z"
                    },
                    "fileFormat": {
                        "$ref": "#/components/schemas/fileFormatEnum"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the recording. Current values are 'processing', 'partial', 'complete', 'deleted' and 'error'. Additional states may be added in the future, so your application must be tolerant of unknown values.",
                        "example": "complete"
                    },
                    "mediaUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL that can be used to download the audio recording",
                        "example": "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/recordings/r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/media"
                    },
                    "transcription": {
                        "$ref": "#/components/schemas/transcriptionMetadata"
                    }
                }
            },
            "conference": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Bandwidth-generated conference ID",
                        "example": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the conference, as specified by your application",
                        "example": "my-conference-name"
                    },
                    "createdTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time the conference was initiated, in ISO 8601 format.",
                        "example": "2022-06-17T22:19:40.375Z"
                    },
                    "completedTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "The time the conference was terminated, in ISO 8601 format.",
                        "example": "2022-06-17T22:20:00.000Z"
                    },
                    "conferenceEventUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "The URL to send the conference-related events.",
                        "example": "https://myServer.com/bandwidth/webhooks/conferenceEvent"
                    },
                    "conferenceEventMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "tag": {
                        "nullable": true,
                        "type": "string",
                        "description": "The custom string attached to the conference that will be sent with callbacks.",
                        "example": "my custom tag"
                    },
                    "activeMembers": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/conferenceMember"
                        },
                        "description": "A list of active members of the conference. Omitted if this\nis a response to the [Get Conferences endpoint](/apis/voice#tag/Conferences/operation/listConferences)"
                    }
                }
            },
            "updateConference": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/conferenceStateEnum"
                    },
                    "redirectUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "The URL to send the [conferenceRedirect](/docs/voice/webhooks/conferenceRedirect)\nevent which will provide new BXML. Not allowed if `state` is `completed`,\nbut required if `state` is `active`",
                        "example": "https://myServer.com/bandwidth/webhooks/conferenceRedirect"
                    },
                    "redirectMethod": {
                        "$ref": "#/components/schemas/redirectMethodEnum"
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "redirectFallbackUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "A fallback url which, if provided, will be used to retry the\n`conferenceRedirect` webhook delivery in case `redirectUrl` fails to respond.  Not\nallowed if `state` is `completed`.",
                        "example": "https://myFallbackServer.com/bandwidth/webhooks/conferenceRedirect"
                    },
                    "redirectFallbackMethod": {
                        "$ref": "#/components/schemas/redirectMethodEnum"
                    },
                    "fallbackUsername": {
                        "$ref": "#/components/schemas/username"
                    },
                    "fallbackPassword": {
                        "$ref": "#/components/schemas/password"
                    }
                }
            },
            "conferenceMember": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "The call ID of this conference member",
                        "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "conferenceId": {
                        "type": "string",
                        "description": "The Bandwidth-generated conference ID",
                        "example": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9"
                    },
                    "memberUrl": {
                        "type": "string",
                        "description": "A URL that may be used to retrieve information about or update\nthe state of this conference member. This is the URL of this member's\n[Get Conference Member](/apis/voice/#operation/getConferenceMember) endpoint\nand [Modify Conference Member](/apis/voice/#operation/updateConferenceMember)\nendpoint.",
                        "example": "https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/members/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    },
                    "mute": {
                        "type": "boolean",
                        "description": "Whether or not this member is currently muted. Members who are muted are still able to hear other participants.\n\nIf used in a PUT request, updates this member's mute status. Has no effect if omitted.",
                        "example": false
                    },
                    "hold": {
                        "type": "boolean",
                        "description": "Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.\n\nIf used in a PUT request, updates this member's hold status. Has no effect if omitted.",
                        "example": false
                    },
                    "callIdsToCoach": {
                        "nullable": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If this member had a value set for `callIdsToCoach` in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.\n\nIf present in a PUT request, modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.\nNote that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.",
                        "example": [
                            "c-25ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                        ]
                    }
                }
            },
            "updateConferenceMember": {
                "type": "object",
                "properties": {
                    "mute": {
                        "type": "boolean",
                        "description": "Whether or not this member is currently muted. Members who are muted are still able to hear other participants.\n\nUpdates this member's mute status. Has no effect if omitted.",
                        "example": false
                    },
                    "hold": {
                        "type": "boolean",
                        "description": "Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.\n\nUpdates this member's hold status. Has no effect if omitted.",
                        "example": false
                    },
                    "callIdsToCoach": {
                        "nullable": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If this member had a value set for `callIdsToCoach` in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.\n\nModifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.\n\nNote that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.",
                        "example": [
                            "c-25ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                        ]
                    }
                }
            },
            "conferenceRecordingMetadata": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Your account ID",
                        "example": "9900000"
                    },
                    "conferenceId": {
                        "type": "string",
                        "description": "The unique, Bandwidth-generated ID of the conference that was recorded",
                        "example": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user-specified name of the conference that was recorded",
                        "example": "my-conference-name"
                    },
                    "recordingId": {
                        "type": "string",
                        "description": "The unique ID of this recording",
                        "example": "r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833"
                    },
                    "duration": {
                        "type": "string",
                        "description": "The duration of the recording in ISO-8601 format",
                        "example": "PT13.67S"
                    },
                    "channels": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Always `1` for conference recordings; multi-channel recordings are not supported on conferences.",
                        "example": 1
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the recording started in ISO-8601 format",
                        "example": "2022-06-17T22:19:40.375Z"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the recording ended in ISO-8601 format",
                        "example": "2022-06-17T22:20:00.000Z"
                    },
                    "fileFormat": {
                        "$ref": "#/components/schemas/fileFormatEnum"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the recording. Current possible values\nare 'processing', 'partial', 'complete', 'deleted', and 'error'. Additional\nstates may be added in the future, so your application must be tolerant\nof unknown values.",
                        "example": "completed"
                    },
                    "mediaUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded.",
                        "example": "https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media"
                    }
                }
            },
            "machineDetectionConfiguration": {
                "type": "object",
                "description": "The machine detection request used to perform <a href='/docs/voice/guides/machineDetection'>machine detection</a> on the call.",
                "properties": {
                    "mode": {
                        "$ref": "#/components/schemas/machineDetectionModeEnum"
                    },
                    "detectionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": "The timeout used for the whole operation, in seconds. If no\nresult is determined in this period, a callback with a `timeout` result\nis sent.",
                        "default": 15,
                        "example": 15
                    },
                    "silenceTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": "If no speech is detected in this period, a callback with a 'silence' result is sent.",
                        "default": 10,
                        "example": 10
                    },
                    "speechThreshold": {
                        "type": "number",
                        "format": "double",
                        "description": "When speech has ended and a result couldn't be determined based\non the audio content itself, this value is used to determine if the speaker\nis a machine based on the speech duration. If the length of the speech\ndetected is greater than or equal to this threshold, the result will be\n'answering-machine'. If the length of speech detected is below this threshold,\nthe result will be 'human'.",
                        "default": 10,
                        "example": 10
                    },
                    "speechEndThreshold": {
                        "type": "number",
                        "format": "double",
                        "description": "Amount of silence (in seconds) before assuming the callee has finished speaking.",
                        "default": 5,
                        "example": 5
                    },
                    "machineSpeechEndThreshold": {
                        "type": "number",
                        "format": "double",
                        "description": "When an answering machine is detected, the amount of silence (in seconds) before assuming the message has finished playing.",
                        "example": 5
                    },
                    "delayResult": {
                        "type": "boolean",
                        "description": "If set to 'true' and if an answering machine is detected, the\n'answering-machine' callback will be delayed until the machine is done\nspeaking or until the 'detectionTimeout' is exceeded. If false, the 'answering-machine'\nresult is sent immediately.",
                        "default": false,
                        "example": false
                    },
                    "callbackUrl": {
                        "nullable": true,
                        "description": "The URL to send the 'machineDetectionComplete' webhook when the detection is completed. Only for 'async' mode.",
                        "type": "string",
                        "format": "uri",
                        "example": "https://myServer.com/bandwidth/webhooks/machineDetectionComplete"
                    },
                    "callbackMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "fallbackUrl": {
                        "nullable": true,
                        "type": "string",
                        "format": "uri",
                        "description": "A fallback URL which, if provided, will be used to retry the\nmachine detection complete webhook delivery in case `callbackUrl` fails\nto respond",
                        "example": "https://myFallbackServer.com/bandwidth/webhooks/machineDetectionComplete"
                    },
                    "fallbackMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "fallbackUsername": {
                        "$ref": "#/components/schemas/username"
                    },
                    "fallbackPassword": {
                        "$ref": "#/components/schemas/password"
                    }
                }
            },
            "transcribeRecording": {
                "type": "object",
                "properties": {
                    "callbackUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable)\nevent to. You should not include sensitive or personally-identifiable\ninformation in the callbackUrl field! Always use the proper username and\npassword fields for authorization.",
                        "example": "https://myServer.com/bandwidth/webhooks/transcriptionAvailable"
                    },
                    "callbackMethod": {
                        "$ref": "#/components/schemas/callbackMethodEnum"
                    },
                    "username": {
                        "$ref": "#/components/schemas/username"
                    },
                    "password": {
                        "$ref": "#/components/schemas/password"
                    },
                    "tag": {
                        "nullable": true,
                        "type": "string",
                        "description": "A custom string that will be sent with the webhook to `callbackUrl`.",
                        "example": "my custom tag"
                    },
                    "callbackTimeout": {
                        "nullable": true,
                        "type": "number",
                        "format": "double",
                        "minimum": 1,
                        "maximum": 25,
                        "default": 15,
                        "description": "This is the timeout (in seconds) to use when delivering the\nwebhook to `callbackUrl`. Can be any numeric value (including decimals)\nbetween 1 and 25.",
                        "example": 5.5
                    }
                }
            },
            "transcriptionList": {
                "type": "object",
                "properties": {
                    "transcripts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/transcription"
                        }
                    }
                }
            },
            "transcriptionMetadata": {
                "nullable": true,
                "type": "object",
                "description": "If the recording was transcribed, metadata about the transcription",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique transcription ID",
                        "example": "t-387bd648-18f3-4823-9d16-746bca0003c9"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the transcription. Current values are\n'none', 'processing', 'available', 'error', 'timeout', 'file-size-too-big',\nand 'file-size-too-small'. Additional states may be added in the future,\nso your application must be tolerant of unknown values.",
                        "example": "available"
                    },
                    "completedTime": {
                        "type": "string",
                        "description": "The time that the transcription was completed",
                        "example": "2022-06-13T18:46:29.715Z"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL of the [transcription](#operation/getCallTranscription)",
                        "example": "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/recordings/r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/transcription"
                    }
                }
            },
            "transcription": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The transcribed text",
                        "example": "Nice talking to you, friend!"
                    },
                    "confidence": {
                        "type": "number",
                        "format": "double",
                        "description": "The confidence on the recognized content, ranging from `0.0` to `1.0` with `1.0` being the highest confidence.",
                        "example": 0.9
                    }
                }
            },
            "voiceApiError": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string"
                    }
                }
            },
            "callCallback": {
                "type": "object",
                "description": "This object represents all possible fields that may be included in callbacks related to call events, including events that come from BXML verbs",
                "properties": {
                    "eventType": {
                        "type": "string"
                    },
                    "eventTime": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "applicationId": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "direction": {
                        "type": "string"
                    },
                    "callId": {
                        "type": "string"
                    },
                    "callUrl": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "answerTime": {
                        "type": "string"
                    },
                    "transferCallerId": {
                        "type": "string"
                    },
                    "transferTo": {
                        "type": "string"
                    },
                    "cause": {
                        "type": "string"
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "errorId": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "digit": {
                        "type": "string"
                    },
                    "parentCallId": {
                        "type": "string"
                    },
                    "recordingId": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "fileFormat": {
                        "type": "string"
                    },
                    "mediaUrl": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "channels": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "digits": {
                        "type": "string"
                    },
                    "terminatingDigit": {
                        "type": "string"
                    },
                    "transcription": {
                        "$ref": "#/components/schemas/transcription"
                    },
                    "diversion": {
                        "$ref": "#/components/schemas/diversion"
                    }
                }
            },
            "diversion": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "privacy": {
                        "type": "string"
                    },
                    "unknown": {
                        "type": "string"
                    },
                    "origTo": {
                        "type": "string"
                    }
                }
            },
            "conferenceCallback": {
                "type": "object",
                "description": "This object represents all possible fields that may be included in callbacks related to conference events",
                "properties": {
                    "conferenceId": {
                        "type": "string",
                        "example": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9"
                    },
                    "name": {
                        "type": "string"
                    },
                    "eventType": {
                        "type": "string"
                    },
                    "eventTime": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "callId": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "recordingId": {
                        "type": "string"
                    },
                    "channels": {
                        "type": "integer"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "fileFormat": {
                        "type": "string"
                    },
                    "mediaUrl": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "codeRequest": {
                "type": "object",
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The phone number to send the mfa code to.",
                        "pattern": "^\\+[1-9]\\d{1,14}$",
                        "example": "+19195551234"
                    },
                    "from": {
                        "type": "string",
                        "description": "The application phone number, the sender of the mfa code.",
                        "pattern": "^\\+[1-9]\\d{1,14}$",
                        "maxLength": 32,
                        "example": "+19195554321"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The application unique ID, obtained from Bandwidth.",
                        "maxLength": 50,
                        "example": "66fd98ae-ac8d-a00f-7fcd-ba3280aeb9b1"
                    },
                    "scope": {
                        "type": "string",
                        "description": "An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \"2FA\".",
                        "maxLength": 25,
                        "example": "2FA"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message format of the mfa code.  There are three values that the system will replace \"{CODE}\", \"{NAME}\", \"{SCOPE}\".  The \"{SCOPE}\" and \"{NAME} value template are optional, while \"{CODE}\" must be supplied.  As the name would suggest, code will be replace with the actual mfa code.  Name is replaced with the application name, configured during provisioning of mfa.  The scope value is the same value sent during the call and partitioned by the server.",
                        "maxLength": 2048,
                        "example": "Your temporary {NAME} {SCOPE} code is {CODE}"
                    },
                    "digits": {
                        "type": "integer",
                        "description": "The number of digits for your mfa code.  The valid number ranges from 2 to 8, inclusively.",
                        "minimum": 4,
                        "maximum": 8,
                        "example": 6
                    }
                },
                "required": [
                    "to",
                    "from",
                    "applicationId",
                    "message",
                    "digits"
                ]
            },
            "voiceCodeResponse": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "Programmable Voice API Call ID.",
                        "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
                    }
                }
            },
            "messagingCodeResponse": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "Messaging API Message ID.",
                        "example": "9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6"
                    }
                }
            },
            "verifyCodeRequest": {
                "type": "object",
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The phone number to send the mfa code to.",
                        "pattern": "^\\+[1-9]\\d{1,14}$",
                        "example": "+19195551234"
                    },
                    "scope": {
                        "type": "string",
                        "description": "An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \"2FA\".",
                        "example": "2FA"
                    },
                    "expirationTimeInMinutes": {
                        "type": "number",
                        "description": "The time period, in minutes, to validate the mfa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.",
                        "minimum": 1,
                        "maximum": 15,
                        "example": 3
                    },
                    "code": {
                        "type": "string",
                        "description": "The generated mfa code to check if valid.",
                        "minLength": 4,
                        "maxLength": 8,
                        "example": "123456"
                    }
                },
                "required": [
                    "to",
                    "expirationTimeInMinutes",
                    "code"
                ]
            },
            "verifyCodeResponse": {
                "type": "object",
                "properties": {
                    "valid": {
                        "type": "boolean",
                        "description": "Whether or not the supplied code is valid.",
                        "example": true
                    }
                }
            },
            "mfaRequestError": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "A message describing the error with your request.",
                        "example": "400 Request is malformed or invalid"
                    },
                    "requestId": {
                        "type": "string",
                        "description": "The associated requestId from AWS.",
                        "example": "354cc8a3-6701-461e-8fa7-8671703dd898"
                    }
                }
            },
            "mfaUnauthorizedRequestError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Unauthorized",
                        "example": "Unauthorized"
                    }
                }
            },
            "mfaForbiddenRequestError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The message containing the reason behind the request being forbidden.",
                        "example": "Missing Authentication Token"
                    }
                }
            },
            "lookupStatusEnum": {
                "type": "string",
                "description": "The status of the request (IN_PROGRESS, COMPLETE, PARTIAL_COMPLETE, or FAILED).",
                "enum": [
                    "IN_PROGRESS",
                    "COMPLETE",
                    "PARTIAL_COMPLETE",
                    "FAILED"
                ],
                "example": "COMPLETE"
            },
            "lookupRequest": {
                "type": "object",
                "description": "Create phone number lookup request.",
                "properties": {
                    "tns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "tns"
                ]
            },
            "createLookupResponse": {
                "type": "object",
                "description": "The request has been accepted for processing but not yet finished and in a terminal state (COMPLETE, PARTIAL_COMPLETE, or FAILED).",
                "properties": {
                    "requestId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "lookupStatus": {
                "type": "object",
                "description": "If requestId exists, the result for that request is returned. See the Examples for details on the various responses that you can receive. Generally, if you see a Response Code of 0 in a result for a TN, information will be available for it.  Any other Response Code will indicate no information was available for the TN.",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "The requestId.",
                        "example": "004223a0-8b17-41b1-bf81-20732adf5590"
                    },
                    "status": {
                        "$ref": "#/components/schemas/lookupStatusEnum"
                    },
                    "result": {
                        "type": "array",
                        "description": "The carrier information results for the specified telephone number.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "Response Code": {
                                    "type": "integer",
                                    "description": "Our vendor's response code.",
                                    "example": 0
                                },
                                "Message": {
                                    "type": "string",
                                    "description": "Message associated with the response code.",
                                    "example": "NOERROR"
                                },
                                "E.164 Format": {
                                    "type": "string",
                                    "description": "The telephone number in E.164 format.",
                                    "example": "+19195551234"
                                },
                                "Formatted": {
                                    "type": "string",
                                    "description": "The formatted version of the telephone number.",
                                    "example": "(919) 555-1234"
                                },
                                "Country": {
                                    "type": "string",
                                    "description": "The country of the telephone number.",
                                    "example": "US"
                                },
                                "Line Type": {
                                    "type": "string",
                                    "description": "The line type of the telephone number.",
                                    "example": "Mobile"
                                },
                                "Line Provider": {
                                    "type": "string",
                                    "description": "The messaging service provider of the telephone number.",
                                    "example": "Verizon Wireless"
                                },
                                "Mobile Country Code": {
                                    "type": "string",
                                    "description": "The first half of the Home Network Identity (HNI).",
                                    "example": "310"
                                },
                                "Mobile Network Code": {
                                    "type": "string",
                                    "description": "The second half of the HNI.",
                                    "example": "010"
                                }
                            }
                        }
                    },
                    "failedTelephoneNumbers": {
                        "type": "array",
                        "description": "The telephone numbers whose lookup failed.",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "+191955512345"
                        ]
                    }
                }
            },
            "tnLookupRequestError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "A description of what validation error occurred.",
                        "example": "example error message"
                    }
                }
            },
            "publishPermissionsEnum": {
                "type": "string",
                "enum": [
                    "AUDIO",
                    "VIDEO"
                ]
            },
            "deviceApiVersionEnum": {
                "type": "string",
                "description": "Optional field to define the device api version of this participant.",
                "example": "V3",
                "default": "V2",
                "enum": [
                    "V3",
                    "V2"
                ]
            },
            "session": {
                "type": "object",
                "description": "Session object.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique id of the session.",
                        "example": "75c21163-e110-41bc-bd76-1bb428ec85d5"
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the session.",
                        "example": "session1"
                    }
                }
            },
            "participant": {
                "type": "object",
                "description": "Participant object.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique id of the participant.",
                        "readOnly": true,
                        "example": "320e2af6-13ec-498d-8b51-daba52c37853"
                    },
                    "callbackUrl": {
                        "type": "string",
                        "nullable": true,
                        "description": "Full callback url to use for notifications about this participant.",
                        "example": "https://example.com/callback"
                    },
                    "publishPermissions": {
                        "type": "array",
                        "description": "Defines if this participant can publish audio or video.",
                        "example": [
                            "VIDEO",
                            "AUDIO"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "$ref": "#/components/schemas/publishPermissionsEnum"
                        }
                    },
                    "sessions": {
                        "type": "array",
                        "description": "List of session ids this participant is associated with\n\nCapped to one\n\nUpon creation of a Participant, returns as an empty array.",
                        "example": [
                            "75c21163-e110-41bc-bd76-1bb428ec85d5"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "subscriptions": {
                        "$ref": "#/components/schemas/subscriptions"
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the participant.",
                        "example": "participant1"
                    },
                    "deviceApiVersion": {
                        "$ref": "#/components/schemas/deviceApiVersionEnum"
                    }
                }
            },
            "createParticipantResponse": {
                "type": "object",
                "description": "Response generated when a Participant is created.",
                "properties": {
                    "participant": {
                        "$ref": "#/components/schemas/participant"
                    },
                    "token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNTE2MjM5MDIyfQ.L8i6g3PfcHlioHCCPURC9pmXT7gdJpx3kOoyAfNUwCc",
                        "description": "Auth token for the returned participant.  This should be passed to the participant so that they can connect to the platform."
                    }
                }
            },
            "createParticipantRequest": {
                "type": "object",
                "description": "Create a participant request.",
                "properties": {
                    "callbackUrl": {
                        "type": "string",
                        "nullable": true,
                        "description": "Full callback url to use for notifications about this participant.",
                        "example": "https://example.com/callback"
                    },
                    "publishPermissions": {
                        "type": "array",
                        "description": "Defines if this participant can publish audio or video.",
                        "example": [
                            "VIDEO",
                            "AUDIO"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "$ref": "#/components/schemas/publishPermissionsEnum"
                        }
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the participant.",
                        "example": "participant1"
                    },
                    "deviceApiVersion": {
                        "$ref": "#/components/schemas/deviceApiVersionEnum"
                    }
                }
            },
            "subscriptions": {
                "type": "object",
                "readOnly": true,
                "required": [
                    "sessionId"
                ],
                "properties": {
                    "sessionId": {
                        "type": "string",
                        "description": "Session the subscriptions are associated with. If this is the only field, the subscriber will be subscribed to all participants in the session (including any participants that are later added to the session). Upon creation of a Participant, returns as an empty object.",
                        "example": "d8886aad-b956-4e1b-b2f4-d7c9f8162772"
                    },
                    "participants": {
                        "type": "array",
                        "description": "(optional) A list of participants  in the session that will be subscribed to. Returns empty if used during the creation of a Participant. ",
                        "example": [
                            {
                                "participantId": "568749d5-04d5-483d-adf5-deac7dd3d521"
                            },
                            {
                                "participantId": "0275e47f-dd21-4cf0-a1e1-dfdc719e73a7",
                                "streamAliases": [
                                    "alias_1",
                                    "alias_2"
                                ]
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/participantSubscription"
                        }
                    }
                }
            },
            "participantSubscription": {
                "type": "object",
                "required": [
                    "participantId"
                ],
                "properties": {
                    "participantId": {
                        "type": "string",
                        "description": "The Participant the subscriber will be subscribed to",
                        "example": "568749d5-04d5-483d-adf5-deac7dd3d521"
                    },
                    "streamAliases": {
                        "type": "array",
                        "description": "(optional) An array of specific streamAliases owned by the Participant that the subscriber will be subscribed to. Background: A streamAlias is created by a WebRTC client when it connects and declares a name for the related stream. The client is responsible for informing the application of any created streamAliases to enable the application to subscribe to specific streamAliases. Subscribing to a `streamAlias` that does not exist is undefined. If the array is empty all aliases are assumed.",
                        "example": [
                            "alias_1",
                            "alias_2"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "requestError": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "A message describing the error with your request.",
                        "example": "Internal error"
                    },
                    "requestId": {
                        "type": "string",
                        "description": "The associated requestId from AWS.",
                        "example": "12af78d1-5f88-4917-925d-17c1ac8fda7a"
                    }
                }
            },
            "unauthorizedRequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Unauthorized",
                        "example": "Unauthorized"
                    }
                }
            },
            "forbiddenRequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The message containing the reason behind the request being forbidden.",
                        "example": "Missing Authentication Token"
                    }
                }
            }
        },
        "responses": {
            "createMessageResponse": {
                "description": "Accepted",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/message"
                        }
                    }
                }
            },
            "listMessagesResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagesList"
                        }
                    }
                }
            },
            "getMediaResponse": {
                "description": "OK",
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "description": "Successful Operation",
                            "format": "byte"
                        }
                    }
                }
            },
            "listMediaResponse": {
                "description": "OK",
                "headers": {
                    "Continuation-Token": {
                        "description": "Continuation token used to retrieve subsequent media.",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/media"
                            }
                        }
                    }
                }
            },
            "messagingBadRequestError": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingUnauthorizedError": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingForbiddenError": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingNotFoundError": {
                "description": "Not Found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingInvalidMediaTypeError": {
                "description": "Unsupported Media Type",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingTooManyRequestsError": {
                "description": "Too Many Requests",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "messagingInternalServerError": {
                "description": "Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingRequestError"
                        }
                    }
                }
            },
            "createCallResponse": {
                "description": "Call Successfully Created",
                "headers": {
                    "Location": {
                        "description": "The URL for further interactions with this call",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/createCallResponse"
                        },
                        "examples": {
                            "createCall Response": {
                                "$ref": "#/components/examples/createCallResponseExample"
                            }
                        }
                    }
                }
            },
            "getCallStateResponse": {
                "description": "Call found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/callState"
                        }
                    }
                }
            },
            "getStatisticsResponse": {
                "description": "Statistics Found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/accountStatistics"
                        }
                    }
                }
            },
            "listCallRecordingsResponse": {
                "description": "Recordings retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/callRecordingMetadata"
                            }
                        }
                    }
                }
            },
            "getCallRecordingResponse": {
                "description": "Recording found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/callRecordingMetadata"
                        }
                    }
                }
            },
            "downloadCallRecordingResponse": {
                "description": "Media found",
                "content": {
                    "audio/vnd.wave": {
                        "schema": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "audio/mpeg": {
                        "schema": {
                            "type": "string",
                            "format": "byte"
                        }
                    }
                }
            },
            "getCallTranscriptionResponse": {
                "description": "Transcription found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/transcriptionList"
                        }
                    }
                }
            },
            "listConferencesResponse": {
                "description": "Conferences retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/conference"
                            }
                        },
                        "examples": {
                            "listConferences Response": {
                                "$ref": "#/components/examples/listConferencesResponseExample"
                            }
                        }
                    }
                }
            },
            "getConferenceResponse": {
                "description": "Conferences retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/conference"
                        }
                    }
                }
            },
            "getConferenceMemberResponse": {
                "description": "Conference member found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/conferenceMember"
                        }
                    }
                }
            },
            "listConferenceRecordingsResponse": {
                "description": "Conference recordings retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/conferenceRecordingMetadata"
                            }
                        }
                    }
                }
            },
            "getConferenceRecordingResponse": {
                "description": "Conference recording found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/conferenceRecordingMetadata"
                        }
                    }
                }
            },
            "voiceBadRequestError": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "badRequestErrorExample": {
                                "$ref": "#/components/examples/voiceBadRequestErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceUnauthorizedError": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "unauthorizedErrorExample": {
                                "$ref": "#/components/examples/voiceUnauthorizedErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceForbiddenError": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "forbiddenErrorExample": {
                                "$ref": "#/components/examples/voiceForbiddenErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceNotFoundError": {
                "description": "Not Found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "notFoundErrorExample": {
                                "$ref": "#/components/examples/voiceNotFoundErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceNotAllowedError": {
                "description": "Method Not Allowed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "notAllowedErrorExample": {
                                "$ref": "#/components/examples/voiceNotAllowedErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceUnsupportedMediaTypeError": {
                "description": "Unsupported Media Type",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "tooManyRequestsErrorExample": {
                                "$ref": "#/components/examples/voiceUnsupportedMediaTypeErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceTooManyRequestsError": {
                "description": "Too Many Requests",
                "headers": {
                    "Retry-After": {
                        "description": "When you should try your request again",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "tooManyRequestsErrorExample": {
                                "$ref": "#/components/examples/voiceTooManyRequestsErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceInternalServerError": {
                "description": "Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceApiError"
                        },
                        "examples": {
                            "internalServerErrorExample": {
                                "$ref": "#/components/examples/voiceInternalServerErrorExample"
                            }
                        }
                    }
                }
            },
            "voiceCodeResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/voiceCodeResponse"
                        }
                    }
                }
            },
            "messagingCodeResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messagingCodeResponse"
                        }
                    }
                }
            },
            "verifyCodeResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/verifyCodeResponse"
                        }
                    }
                }
            },
            "mfaBadRequestError": {
                "description": "Bad Request",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mfaRequestError"
                        }
                    }
                }
            },
            "mfaUnauthorizedError": {
                "description": "Unauthorized",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mfaUnauthorizedRequestError"
                        }
                    }
                }
            },
            "mfaForbiddenError": {
                "description": "Forbidden",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mfaForbiddenRequestError"
                        }
                    }
                }
            },
            "mfaTooManyRequestsError": {
                "description": "Too Many Requests",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mfaRequestError"
                        }
                    }
                }
            },
            "mfaInternalServerError": {
                "description": "Internal Server Error",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/mfaRequestError"
                        }
                    }
                }
            },
            "createLookupResponse": {
                "description": "Accepted",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/createLookupResponse"
                        },
                        "examples": {
                            "lookupResponseExample": {
                                "$ref": "#/components/examples/lookupInProgressExample"
                            }
                        }
                    }
                }
            },
            "getLookupResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/lookupStatus"
                        },
                        "examples": {
                            "lookupInProgressExample": {
                                "$ref": "#/components/examples/lookupInProgressExample"
                            },
                            "lookupFailedExample": {
                                "$ref": "#/components/examples/lookupFailedExample"
                            },
                            "lookupSingleNumberCompleteExample": {
                                "$ref": "#/components/examples/lookupSingleNumberCompleteExample"
                            },
                            "lookupMultipleNumbersCompleteExample": {
                                "$ref": "#/components/examples/lookupMultipleNumbersCompleteExample"
                            },
                            "lookupMultipleNumbersPartialCompleteExample": {
                                "$ref": "#/components/examples/lookupMultipleNumbersPartialCompleteExample"
                            },
                            "lookupSingleNumberCompleteNoInfoExample": {
                                "$ref": "#/components/examples/lookupSingleNumberCompleteNoInfoExample"
                            }
                        }
                    }
                }
            },
            "tnLookupBadRequestError": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "badRequest": {
                                "summary": "Example Bad Request Error",
                                "value": {
                                    "message": "Some tns do not match e164 format: 1234"
                                }
                            }
                        }
                    }
                }
            },
            "tnLookupUnauthorizedError": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "unauthorized": {
                                "summary": "Example Unauthorized Error",
                                "value": {
                                    "message": "Unauthorized"
                                }
                            }
                        }
                    }
                }
            },
            "tnLookupForbiddenError": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "forbidden": {
                                "summary": "Example Forbidden Error",
                                "value": {
                                    "message": "Authorization header requires 'Credential' parameter. Authorization header requires 'Signature' parameter. Authorization header requires 'SignedHeaders' parameter. Authorization header requires existence of either a 'X-Amz-Date' or a 'Date' header. Authorization=Basic Y2tvZloPTGhHgywYIzGlcGVlcGvvcGovYTIGIt=='"
                                }
                            }
                        }
                    }
                }
            },
            "tnLookupMediaTypeError": {
                "description": "Unsupported Media Type",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "mediaType": {
                                "summary": "Example Unsupported Media Type Error",
                                "value": {
                                    "message": "Content-Type must be application/json."
                                }
                            }
                        }
                    }
                }
            },
            "tnLookupTooManyRequestsError": {
                "description": "Too Many Requests",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "mediaType": {
                                "summary": "Example Too Many Requests Error",
                                "value": {
                                    "message": "Too many requests."
                                }
                            }
                        }
                    }
                }
            },
            "tnLookupInternalServerError": {
                "description": "Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tnLookupRequestError"
                        },
                        "examples": {
                            "mediaType": {
                                "summary": "Example Internal Server Error Error",
                                "value": {
                                    "message": "Request has not been passed further."
                                }
                            }
                        }
                    }
                }
            },
            "createParticipantResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/createParticipantResponse"
                        }
                    }
                }
            },
            "getParticipantResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/participant"
                        }
                    }
                }
            },
            "sessionResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/session"
                        }
                    }
                }
            },
            "listSessionParticipantsResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/participant"
                            }
                        }
                    }
                }
            },
            "getParticipantSubscriptionsResponse": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/subscriptions"
                        }
                    }
                }
            },
            "webrtcBadRequestError": {
                "description": "Bad Request",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/requestError"
                        }
                    }
                }
            },
            "webrtcUnauthorizedError": {
                "description": "Unauthorized",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/unauthorizedRequest"
                        }
                    }
                }
            },
            "webrtcForbiddenError": {
                "description": "Forbidden",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/forbiddenRequest"
                        }
                    }
                }
            },
            "webrtcNotFoundError": {
                "description": "Not Found",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/requestError"
                        }
                    }
                }
            },
            "webrtcConflictError": {
                "description": "Conflict",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/requestError"
                        }
                    }
                }
            },
            "webrtcInternalServerError": {
                "description": "Internal Server Error",
                "headers": {},
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/requestError"
                        }
                    }
                }
            }
        },
        "parameters": {
            "accountId": {
                "in": "path",
                "name": "accountId",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Your Bandwidth Account ID.",
                "example": "9900000"
            },
            "mediaId": {
                "in": "path",
                "name": "mediaId",
                "required": true,
                "description": "Media ID to retrieve.",
                "example": "14762070468292kw2fuqty55yp2b2/0/bw.png",
                "schema": {
                    "type": "string"
                }
            },
            "contentType": {
                "in": "header",
                "name": "Content-Type",
                "style": "simple",
                "explode": false,
                "description": "The media type of the entity-body.",
                "example": "audio/wav",
                "schema": {
                    "type": "string"
                }
            },
            "cacheControl": {
                "in": "header",
                "name": "Cache-Control",
                "style": "simple",
                "explode": false,
                "description": "General-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.",
                "example": "no-cache",
                "schema": {
                    "type": "string"
                }
            },
            "continuationToken": {
                "in": "header",
                "name": "Continuation-Token",
                "description": "Continuation token used to retrieve subsequent media.",
                "example": "1XEi2tsFtLo1JbtLwETnM1ZJ+PqAa8w6ENvC5QKvwyrCDYII663Gy5M4s40owR1tjkuWUif6qbWvFtQJR5/ipqbUnfAqL254LKNlPy6tATCzioKSuHuOqgzloDkSwRtX0LtcL2otHS69hK343m+SjdL+vlj71tT39",
                "schema": {
                    "type": "string"
                }
            },
            "messageId": {
                "in": "query",
                "name": "messageId",
                "required": false,
                "description": "The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter.",
                "example": "9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6",
                "schema": {
                    "type": "string"
                }
            },
            "sourceTn": {
                "in": "query",
                "name": "sourceTn",
                "required": false,
                "description": "The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').",
                "example": "%2B15554443333",
                "schema": {
                    "type": "string"
                }
            },
            "destinationTn": {
                "in": "query",
                "name": "destinationTn",
                "required": false,
                "description": "The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').",
                "example": "%2B15554443333",
                "schema": {
                    "type": "string"
                }
            },
            "messageStatus": {
                "in": "query",
                "name": "messageStatus",
                "required": false,
                "description": "The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED.",
                "schema": {
                    "$ref": "#/components/schemas/messageStatusEnum"
                }
            },
            "messageDirection": {
                "in": "query",
                "name": "messageDirection",
                "required": false,
                "description": "The direction of the message. One of INBOUND OUTBOUND.",
                "schema": {
                    "$ref": "#/components/schemas/messageDirectionEnum"
                }
            },
            "carrierName": {
                "in": "query",
                "name": "carrierName",
                "required": false,
                "description": "The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&T should be passed as AT%26T).",
                "example": "Verizon",
                "schema": {
                    "type": "string"
                }
            },
            "messageType": {
                "in": "query",
                "name": "messageType",
                "required": false,
                "description": "The type of message. Either sms or mms.",
                "schema": {
                    "$ref": "#/components/schemas/messageTypeEnum"
                }
            },
            "errorCode": {
                "in": "query",
                "name": "errorCode",
                "required": false,
                "description": "The error code of the message.",
                "example": 9902,
                "schema": {
                    "type": "integer"
                }
            },
            "fromDateTime": {
                "in": "query",
                "name": "fromDateTime",
                "required": false,
                "description": "The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.",
                "example": "2016-09-14T18:20:16.000Z",
                "schema": {
                    "type": "string"
                }
            },
            "toDateTime": {
                "in": "query",
                "name": "toDateTime",
                "required": false,
                "description": "The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.",
                "example": "2016-09-14T18:20:16.000Z",
                "schema": {
                    "type": "string"
                }
            },
            "sort": {
                "in": "query",
                "name": "sort",
                "required": false,
                "description": "The field and direction to sort by combined with a colon. Direction is either asc or desc.",
                "example": "sourceTn:desc",
                "schema": {
                    "type": "string"
                }
            },
            "pageToken": {
                "in": "query",
                "name": "pageToken",
                "required": false,
                "description": "A base64 encoded value used for pagination of results.",
                "example": "gdEewhcJLQRB5",
                "schema": {
                    "type": "string"
                }
            },
            "limit": {
                "in": "query",
                "name": "limit",
                "required": false,
                "description": "The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000.",
                "schema": {
                    "type": "integer"
                },
                "example": 50
            },
            "accountId1": {
                "name": "accountId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Your Bandwidth Account ID",
                "example": "9900000"
            },
            "callId": {
                "name": "callId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Programmable Voice API Call ID",
                "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
            },
            "recordingId": {
                "name": "recordingId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Programmable Voice API Recording ID",
                "example": "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
            },
            "conferenceId": {
                "name": "conferenceId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Programmable Voice API Conference ID",
                "example": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9"
            },
            "memberId": {
                "name": "memberId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "Programmable Voice API Conference Member ID",
                "example": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85"
            },
            "to": {
                "name": "to",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results by the `to` field.",
                "example": "%2b19195551234"
            },
            "from": {
                "name": "from",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results by the `from` field.",
                "example": "%2b19195554321"
            },
            "name": {
                "name": "name",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results by the `name` field.",
                "example": "my-custom-name"
            },
            "minCreatedTime": {
                "name": "minCreatedTime",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results to conferences which have a `createdTime` after or at `minCreatedTime` (in ISO8601 format).",
                "example": "2022-06-21T19:13:21Z"
            },
            "maxCreatedTime": {
                "name": "maxCreatedTime",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results to conferences which have a `createdTime` before or at `maxCreatedTime` (in ISO8601 format).",
                "example": "2022-06-21T19:13:21Z"
            },
            "minStartTime": {
                "name": "minStartTime",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results to recordings which have a `startTime` after or including `minStartTime` (in ISO8601 format).",
                "example": "2022-06-21T19:13:21Z"
            },
            "maxStartTime": {
                "name": "maxStartTime",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Filter results to recordings which have a `startTime` before `maxStartTime` (in ISO8601 format).",
                "example": "2022-06-21T19:13:21Z"
            },
            "pageSize": {
                "name": "pageSize",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 1000
                },
                "description": "Specifies the max number of conferences that will be returned.",
                "example": 500
            },
            "pageToken1": {
                "name": "pageToken",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "description": "Not intended for explicit use. To use pagination, follow the links in the `Link` header of the response, as indicated in the endpoint description."
            },
            "accountId2": {
                "name": "accountId",
                "description": "Bandwidth Account ID with Voice service enabled.",
                "in": "path",
                "required": true,
                "style": "simple",
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "accountId3": {
                "name": "accountId",
                "description": "The ID of the Bandwidth account that the user belongs to.",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "9900000"
                }
            },
            "requestId": {
                "name": "requestId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string",
                    "example": "004223a0-8b17-41b1-bf81-20732adf5590"
                }
            },
            "accountId4": {
                "name": "accountId",
                "in": "path",
                "description": "Account ID",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "9900000"
            },
            "sessionId": {
                "name": "sessionId",
                "in": "path",
                "description": "Session ID",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "cb5054ee-a69b-41ac-9ab2-04d6370826b4"
            },
            "participantId": {
                "name": "participantId",
                "in": "path",
                "description": "Participant ID",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "example": "62e0ecb9-0b1b-5115-aae4-4f36123d6bb1"
            }
        },
        "requestBodies": {
            "createMessageRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/messageRequest"
                        }
                    }
                },
                "required": true
            },
            "uploadMediaRequest": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "byte"
                        }
                    }
                },
                "required": true
            },
            "createCallRequest": {
                "description": "JSON object containing information to create an outbound call",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/createCall"
                        }
                    }
                }
            },
            "updateCallRequest": {
                "description": "JSON object containing information to redirect an existing call to a new BXML document",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/updateCall"
                        }
                    }
                }
            },
            "updateCallBxmlRequest": {
                "required": true,
                "content": {
                    "application/xml": {
                        "schema": {
                            "type": "string",
                            "description": "A valid BXML document to replace the call's current BXML."
                        },
                        "examples": {
                            "speakSentence": {
                                "summary": "Speak Sentence",
                                "value": "<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<Bxml>\n  <SpeakSentence>This is a test sentence.</SpeakSentence>\n</Bxml>"
                            },
                            "redirectUrl": {
                                "summary": "Redirect",
                                "value": "<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<Bxml>\n  <Redirect redirectUrl=\"https://test.com\" redirectMethod=\"GET\"/>\n</Bxml>"
                            }
                        }
                    }
                }
            },
            "updateCallRecordingRequest": {
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/updateCallRecording"
                        }
                    }
                }
            },
            "transcribeRecordingRequest": {
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/transcribeRecording"
                        }
                    }
                }
            },
            "updateConferenceRequest": {
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/updateConference"
                        }
                    }
                }
            },
            "updateConferenceBxmlRequest": {
                "required": true,
                "content": {
                    "application/xml": {
                        "schema": {
                            "type": "string",
                            "description": "A valid BXML document to replace the call's current BXML."
                        },
                        "examples": {
                            "stopRecording": {
                                "summary": "Stop Recording",
                                "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Bxml>\n    <StopRecording/>\n</Bxml>"
                            }
                        }
                    }
                }
            },
            "updateConferenceMemberRequest": {
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/updateConferenceMember"
                        }
                    }
                }
            },
            "codeRequest": {
                "description": "MFA code request body.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/codeRequest"
                        }
                    }
                }
            },
            "codeVerify": {
                "description": "MFA code verify request body.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/verifyCodeRequest"
                        }
                    }
                }
            },
            "createLookupRequest": {
                "description": "Phone number lookup request.",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/lookupRequest"
                        },
                        "examples": {
                            "singleNumberRequestExample": {
                                "$ref": "#/components/examples/singleNumberRequestExample"
                            },
                            "multipleNumberRequestExample": {
                                "$ref": "#/components/examples/multipleNumberRequestExample"
                            }
                        }
                    }
                }
            },
            "createParticipantRequest": {
                "description": "Create participant request body.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/createParticipantRequest"
                        }
                    }
                }
            },
            "createSessionRequest": {
                "description": "Create session request body.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/session"
                        }
                    }
                }
            },
            "addParticipantToSessionRequest": {
                "description": "Optional set of subscriptions to set on the participant.\nCalling this endpoint with no/empty body will only add the participant to the session. NOTE: the request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint.",
                "required": false,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/subscriptions"
                        }
                    }
                }
            },
            "updateParticipantSubscriptionsRequest": {
                "description": "Update participant subscriptions request body.",
                "required": false,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/subscriptions"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "Basic": {
                "type": "http",
                "scheme": "basic",
                "description": "Basic authentication is a simple authentication scheme built into the\nHTTP protocol. To use it, send your HTTP requests with an Authorization\nheader that contains the word Basic followed by a space and a\nbase64-encoded string `username:password`Example: `Authorization: Basic\nZGVtbZpwQDU1dzByZA==`"
            }
        },
        "examples": {
            "createCallResponseExample": {
                "summary": "Example of a createCall Response",
                "value": {
                    "applicationId": "04e88489-df02-4e34-a0ee-27a91849555f",
                    "accountId": "9900000",
                    "callId": "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                    "to": "+19195551234",
                    "from": "+19195554312",
                    "enqueuedTime": "2022-06-16T13:15:07.160Z",
                    "callUrl": "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                    "callTimeout": 30,
                    "callbackTimeout": 15,
                    "tag": "My custom tag value",
                    "answerMethod": "POST",
                    "answerUrl": "https://myServer.com/bandwidth/webhooks/answer",
                    "answerFallbackMethod": "POST",
                    "disconnectMethod": "POST",
                    "disconnectUrl": "https://myServer.com/bandwidth/webhooks/disconnect",
                    "username": "mySecretUsername",
                    "password": "*****",
                    "fallbackUsername": "mySecretUsername",
                    "fallbackPassword": "*****",
                    "priority": 5
                }
            },
            "listConferencesResponseExample": {
                "summary": "Example of a listConferences Response",
                "value": [
                    {
                        "id": "conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9",
                        "name": "my-conference-name",
                        "createdTime": "2022-06-17T22:19:40.375Z",
                        "completedTime": "2022-06-17T22:20:00.000Z",
                        "conferenceEventUrl": "https://myServer.com/bandwidth/webhooks/conferenceEvent",
                        "conferenceEventMethod": "POST",
                        "tag": "my custom tag"
                    }
                ]
            },
            "voiceBadRequestErrorExample": {
                "summary": "Example of a Bad Request (400) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceUnauthorizedErrorExample": {
                "summary": "Example of an Unauthorized (401) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceForbiddenErrorExample": {
                "summary": "Example of a Forbidden (403) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceNotFoundErrorExample": {
                "summary": "Example of a Not Found (404) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceNotAllowedErrorExample": {
                "summary": "Example of a Not Allowed (405) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceUnsupportedMediaTypeErrorExample": {
                "summary": "Example of an Unsupported Media Type (415) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceTooManyRequestsErrorExample": {
                "summary": "Example of a Too Many Requests (429) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "voiceInternalServerErrorExample": {
                "summary": "Example of an Internal Server (500) Error",
                "value": {
                    "type": "validation",
                    "description": "Invalid answerUrl: only http and https are allowed"
                }
            },
            "singleNumberRequestExample": {
                "summary": "Example Number Lookup Request for One Number",
                "value": {
                    "tns": [
                        "+19195551234"
                    ]
                }
            },
            "multipleNumberRequestExample": {
                "summary": "Example Number Lookup Request for Multiple Numbers",
                "value": {
                    "tns": [
                        "+19195551234",
                        "+19195554321"
                    ]
                }
            },
            "lookupInProgressExample": {
                "summary": "Example Lookup In Progress Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "IN_PROGRESS"
                }
            },
            "lookupFailedExample": {
                "summary": "Example Lookup Failed Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "FAILED",
                    "failedTelephoneNumbers": [
                        "+191955512345"
                    ]
                }
            },
            "lookupSingleNumberCompleteExample": {
                "summary": "Example Single Number Lookup Complete Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "COMPLETE",
                    "result": [
                        {
                            "Response Code": 0,
                            "Message": "NOERROR",
                            "E.164 Format": "+19195551234",
                            "Formatted": "(919) 555-1234",
                            "Country": "US",
                            "Line Type": "Mobile",
                            "Line Provider": "Verizon Wireless",
                            "Mobile Country Code": "310",
                            "Mobile Network Code": "010"
                        }
                    ]
                }
            },
            "lookupMultipleNumbersCompleteExample": {
                "summary": "Example Multiple Numbers Lookup Complete Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "COMPLETE",
                    "result": [
                        {
                            "Response Code": 0,
                            "Message": "NOERROR",
                            "E.164 Format": "+19195551234",
                            "Formatted": "(919) 555-1234",
                            "Country": "US",
                            "Line Type": "Mobile",
                            "Line Provider": "Verizon Wireless",
                            "Mobile Country Code": "310",
                            "Mobile Network Code": "010"
                        },
                        {
                            "Response Code": 0,
                            "Message": "NOERROR",
                            "E.164 Format": "+19195554321",
                            "Formatted": "(919) 555-4321",
                            "Country": "US",
                            "Line Type": "Mobile",
                            "Line Provider": "T-Mobile USA",
                            "Mobile Country Code": "310",
                            "Mobile Network Code": "160"
                        }
                    ]
                }
            },
            "lookupMultipleNumbersPartialCompleteExample": {
                "summary": "Example Multiple Numbers Lookup Partial Complete Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "PARTIAL_COMPLETE",
                    "result": [
                        {
                            "Response Code": 0,
                            "Message": "NOERROR",
                            "E.164 Format": "+19195551234",
                            "Formatted": "(919) 555-1234",
                            "Country": "US",
                            "Line Type": "Mobile",
                            "Line Provider": "Verizon Wireless",
                            "Mobile Country Code": "310",
                            "Mobile Network Code": "010"
                        }
                    ],
                    "failedTelephoneNumbers": [
                        "+191955512345"
                    ]
                }
            },
            "lookupSingleNumberCompleteNoInfoExample": {
                "summary": "Example Single Number Lookup Complete with No Information Response",
                "value": {
                    "requestId": "004223a0-8b17-41b1-bf81-20732adf5590",
                    "status": "COMPLETE",
                    "result": [
                        {
                            "Response Code": 3,
                            "Message": "NXDOMAIN",
                            "E.164 Format": "+19195550000",
                            "Formatted": "(919) 555-0000",
                            "Country": "US"
                        }
                    ]
                }
            }
        }
    },
    "info": {
        "title": "Bandwidth",
        "description": "Bandwidth's Communication APIs",
        "contact": {
            "name": "Bandwidth",
            "url": "https://dev.bandwidth.com",
            "email": "letstalk@bandwidth.com"
        },
        "version": "1.0.0"
    }
}
