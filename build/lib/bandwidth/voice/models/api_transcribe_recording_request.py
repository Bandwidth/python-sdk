# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class ApiTranscribeRecordingRequest(object):

    """Implementation of the 'ApiTranscribeRecordingRequest' model.

    TODO: type model description here.

    Attributes:
        callback_url (string): TODO: type description here.
        callback_method (CallbackMethodEnum): TODO: type description here.
        username (string): TODO: type description here.
        password (string): TODO: type description here.
        tag (string): TODO: type description here.
        callback_timeout (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "callback_url": 'callbackUrl',
        "callback_method": 'callbackMethod',
        "username": 'username',
        "password": 'password',
        "tag": 'tag',
        "callback_timeout": 'callbackTimeout'
    }

    def __init__(self,
                 callback_url=None,
                 callback_method=None,
                 username=None,
                 password=None,
                 tag=None,
                 callback_timeout=None):
        """Constructor for the ApiTranscribeRecordingRequest class"""

        # Initialize members of the class
        self.callback_url = callback_url
        self.callback_method = callback_method
        self.username = username
        self.password = password
        self.tag = tag
        self.callback_timeout = callback_timeout

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        callback_url = dictionary.get('callbackUrl')
        callback_method = dictionary.get('callbackMethod')
        username = dictionary.get('username')
        password = dictionary.get('password')
        tag = dictionary.get('tag')
        callback_timeout = dictionary.get('callbackTimeout')

        # Return an object of this model
        return cls(callback_url,
                   callback_method,
                   username,
                   password,
                   tag,
                   callback_timeout)
