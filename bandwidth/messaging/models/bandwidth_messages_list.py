# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""
from bandwidth.messaging.models.bandwidth_message_item import BandwidthMessageItem
from bandwidth.messaging.models.page_info import PageInfo


class BandwidthMessagesList(object):

    """Implementation of the 'BandwidthMessagesList' model.

    TODO: type model description here.

    Attributes:
        total_count (int): Total number of messages matched by the search
        page_info (PageInfo): TODO: type description here.
        messages (list of BandwidthMessageItem): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_count": 'totalCount',
        "page_info": 'pageInfo',
        "messages": 'messages'
    }

    def __init__(self,
                 total_count=None,
                 page_info=None,
                 messages=None):
        """Constructor for the BandwidthMessagesList class"""

        # Initialize members of the class
        self.total_count = total_count
        self.page_info = page_info
        self.messages = messages

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        total_count = dictionary.get('totalCount')
        page_info = PageInfo.from_dictionary(dictionary.get('pageInfo')) if dictionary.get('pageInfo') else None
        messages = None
        if dictionary.get('messages') is not None:
            messages = [BandwidthMessageItem.from_dictionary(x) for x in dictionary.get('messages')]

        # Return an object of this model
        return cls(total_count,
                   page_info,
                   messages)
