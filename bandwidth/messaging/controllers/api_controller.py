# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.utilities.file_wrapper import FileWrapper
from bandwidth.messaging.controllers.base_controller import BaseController
from bandwidth.http.auth.messaging_basic_auth import MessagingBasicAuth
from bandwidth.messaging.models.media import Media
from bandwidth.messaging.models.bandwidth_message import BandwidthMessage
from bandwidth.messaging.exceptions.messaging_exception import MessagingException


class APIController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(APIController, self).__init__(config, call_back)

    def list_media(self,
                   user_id,
                   continuation_token=None):
        """Does a GET request to /users/{userId}/media.

        listMedia

        Args:
            user_id (string): TODO: type description here.
            continuation_token (string, optional): TODO: type description
                here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}/media'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': user_id
        })
        _query_builder = self.config.get_base_uri(Server.MESSAGINGDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Continuation-Token': continuation_token
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        MessagingBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise MessagingException('400 Request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise MessagingException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise MessagingException('403 The user does not have access to this API', _response)
        elif _response.status_code == 404:
            raise MessagingException('404 Path not found', _response)
        elif _response.status_code == 415:
            raise MessagingException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise MessagingException('429 The rate limit has been reached', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Media.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_media(self,
                  user_id,
                  media_id):
        """Does a GET request to /users/{userId}/media/{mediaId}.

        getMedia

        Args:
            user_id (string): TODO: type description here.
            media_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}/media/{mediaId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': user_id,
            'mediaId': media_id
        })
        _query_builder = self.config.get_base_uri(Server.MESSAGINGDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        MessagingBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request, binary=True)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise MessagingException('400 Request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise MessagingException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise MessagingException('403 The user does not have access to this API', _response)
        elif _response.status_code == 404:
            raise MessagingException('404 Path not found', _response)
        elif _response.status_code == 415:
            raise MessagingException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise MessagingException('429 The rate limit has been reached', _response)
        self.validate_response(_response)

        decoded = _response.text
        _result = ApiResponse(_response, body=decoded)
        return _result

    def upload_media(self,
                     user_id,
                     media_id,
                     content_length,
                     body,
                     content_type='application/octet-stream',
                     cache_control=None):
        """Does a PUT request to /users/{userId}/media/{mediaId}.

        uploadMedia

        Args:
            user_id (string): TODO: type description here.
            media_id (string): TODO: type description here.
            content_length (long|int): TODO: type description here.
            body (string): TODO: type description here.
            content_type (string, optional): TODO: type description here.
                Example: application/octet-stream
            cache_control (string, optional): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}/media/{mediaId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': user_id,
            'mediaId': media_id
        })
        _query_builder = self.config.get_base_uri(Server.MESSAGINGDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        if isinstance(body, FileWrapper):
            body_wrapper = body.file_stream
            body_content_type = body.content_type
        else:
            body_wrapper = body
            body_content_type = content_type

        # Prepare headers
        _headers = {
            'content-type': body_content_type,
            'Content-Length': content_length,
            'Cache-Control': cache_control
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=body_wrapper)
        MessagingBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise MessagingException('400 Request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise MessagingException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise MessagingException('403 The user does not have access to this API', _response)
        elif _response.status_code == 404:
            raise MessagingException('404 Path not found', _response)
        elif _response.status_code == 415:
            raise MessagingException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise MessagingException('429 The rate limit has been reached', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def delete_media(self,
                     user_id,
                     media_id):
        """Does a DELETE request to /users/{userId}/media/{mediaId}.

        deleteMedia

        Args:
            user_id (string): TODO: type description here.
            media_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}/media/{mediaId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': user_id,
            'mediaId': media_id
        })
        _query_builder = self.config.get_base_uri(Server.MESSAGINGDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        MessagingBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise MessagingException('400 Request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise MessagingException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise MessagingException('403 The user does not have access to this API', _response)
        elif _response.status_code == 404:
            raise MessagingException('404 Path not found', _response)
        elif _response.status_code == 415:
            raise MessagingException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise MessagingException('429 The rate limit has been reached', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def create_message(self,
                       user_id,
                       body=None):
        """Does a POST request to /users/{userId}/messages.

        createMessage

        Args:
            user_id (string): TODO: type description here.
            body (MessageRequest, optional): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/users/{userId}/messages'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': user_id
        })
        _query_builder = self.config.get_base_uri(Server.MESSAGINGDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        MessagingBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise MessagingException('400 Request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise MessagingException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise MessagingException('403 The user does not have access to this API', _response)
        elif _response.status_code == 404:
            raise MessagingException('404 Path not found', _response)
        elif _response.status_code == 415:
            raise MessagingException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise MessagingException('429 The rate limit has been reached', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BandwidthMessage.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result
