"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from bandwidth.exceptions import ApiAttributeError


def lazy_import():
    from bandwidth.model.call_direction_enum import CallDirectionEnum
    globals()['CallDirectionEnum'] = CallDirectionEnum


class CallState(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'application_id': (str,),  # noqa: E501
            'account_id': (str,),  # noqa: E501
            'call_id': (str,),  # noqa: E501
            'parent_call_id': (str, none_type,),  # noqa: E501
            'to': (str,),  # noqa: E501
            '_from': (str,),  # noqa: E501
            'direction': (CallDirectionEnum,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'stir_shaken': ({str: (str,)}, none_type,),  # noqa: E501
            'identity': (str, none_type,),  # noqa: E501
            'enqueued_time': (datetime, none_type,),  # noqa: E501
            'start_time': (datetime, none_type,),  # noqa: E501
            'answer_time': (datetime, none_type,),  # noqa: E501
            'end_time': (datetime, none_type,),  # noqa: E501
            'disconnect_cause': (str, none_type,),  # noqa: E501
            'error_message': (str, none_type,),  # noqa: E501
            'error_id': (str, none_type,),  # noqa: E501
            'last_update': (datetime,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'application_id': 'applicationId',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'call_id': 'callId',  # noqa: E501
        'parent_call_id': 'parentCallId',  # noqa: E501
        'to': 'to',  # noqa: E501
        '_from': 'from',  # noqa: E501
        'direction': 'direction',  # noqa: E501
        'state': 'state',  # noqa: E501
        'stir_shaken': 'stirShaken',  # noqa: E501
        'identity': 'identity',  # noqa: E501
        'enqueued_time': 'enqueuedTime',  # noqa: E501
        'start_time': 'startTime',  # noqa: E501
        'answer_time': 'answerTime',  # noqa: E501
        'end_time': 'endTime',  # noqa: E501
        'disconnect_cause': 'disconnectCause',  # noqa: E501
        'error_message': 'errorMessage',  # noqa: E501
        'error_id': 'errorId',  # noqa: E501
        'last_update': 'lastUpdate',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """CallState - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            application_id (str): The application id associated with the call.. [optional]  # noqa: E501
            account_id (str): The account id associated with the call.. [optional]  # noqa: E501
            call_id (str): The programmable voice API call ID.. [optional]  # noqa: E501
            parent_call_id (str, none_type): The A-leg call id, set only if this call is the B-leg of a [`<Transfer>`](/docs/voice/bxml/transfer).. [optional]  # noqa: E501
            to (str): The phone number that received the call, in E.164 format (e.g. +15555555555), or if the call was to a SIP URI, the SIP URI. [optional]  # noqa: E501
            _from (str): The phone number that made the call, in E.164 format (e.g. +15555555555).. [optional]  # noqa: E501
            direction (CallDirectionEnum): [optional]  # noqa: E501
            state (str): The current state of the call. Current possible values are `queued`, `initiated`, `answered` and `disconnected`. Additional states may be added in the future, so your application must be tolerant of unknown values.. [optional]  # noqa: E501
            stir_shaken ({str: (str,)}, none_type): For inbound calls, the Bandwidth STIR/SHAKEN implementation will verify the information provided in the inbound invite request `Identity` header. The verification status is stored in the call state `stirShaken` property as follows.  | Property          | Description | |:------------------|:------------| | verstat | (optional) The verification status indicating whether the verification was successful or not. Possible values are `TN-Verification-Passed` or `TN-Verification-Failed`. | | attestationIndicator | (optional) The attestation level verified by Bandwidth. Possible values are `A` (full), `B` (partial) or `C` (gateway). | | originatingId | (optional) A unique origination identifier. |  Note that these are common properties but that the `stirShaken` object is free form and can contain other key-value pairs.  More information: [Understanding STIR/SHAKEN](https://www.bandwidth.com/regulations/stir-shaken). [optional]  # noqa: E501
            identity (str, none_type): The value of the `Identity` header from the inbound invite request. Only present for inbound calls and if the account is configured to forward this header.. [optional]  # noqa: E501
            enqueued_time (datetime, none_type): The time this call was placed in queue.. [optional]  # noqa: E501
            start_time (datetime, none_type): The time the call was initiated, in ISO 8601 format. `null` if the call is still in your queue.. [optional]  # noqa: E501
            answer_time (datetime, none_type): Populated once the call has been answered, with the time in ISO 8601 format.. [optional]  # noqa: E501
            end_time (datetime, none_type): Populated once the call has ended, with the time in ISO 8601 format.. [optional]  # noqa: E501
            disconnect_cause (str, none_type): | Cause | Description | |:------|:------------| | `hangup`| One party hung up the call, a [`<Hangup>`](../../bxml/verbs/hangup.md) verb was executed, or there was no more BXML to execute; it indicates that the call ended normally. | | `busy` | Callee was busy. | | `timeout` | Call wasn't answered before the `callTimeout` was reached. | | `cancel` | Call was cancelled by its originator while it was ringing. | | `rejected` | Call was rejected by the callee. | | `callback-error` | BXML callback couldn't be delivered to your callback server. | | `invalid-bxml` | Invalid BXML was returned in response to a callback. | | `application-error` | An unsupported action was tried on the call, e.g. trying to play a .ogg audio. | | `account-limit` | Account rate limits were reached. | | `node-capacity-exceeded` | System maximum capacity was reached. | | `error` | Some error not described in any of the other causes happened on the call. | | `unknown` | Unknown error happened on the call. |  Note: This list is not exhaustive and other values can appear in the future.. [optional]  # noqa: E501
            error_message (str, none_type): Populated only if the call ended with an error, with text explaining the reason.. [optional]  # noqa: E501
            error_id (str, none_type): Populated only if the call ended with an error, with a Bandwidth internal id that references the error event.. [optional]  # noqa: E501
            last_update (datetime): The last time the call had a state update, in ISO 8601 format.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """CallState - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            application_id (str): The application id associated with the call.. [optional]  # noqa: E501
            account_id (str): The account id associated with the call.. [optional]  # noqa: E501
            call_id (str): The programmable voice API call ID.. [optional]  # noqa: E501
            parent_call_id (str, none_type): The A-leg call id, set only if this call is the B-leg of a [`<Transfer>`](/docs/voice/bxml/transfer).. [optional]  # noqa: E501
            to (str): The phone number that received the call, in E.164 format (e.g. +15555555555), or if the call was to a SIP URI, the SIP URI. [optional]  # noqa: E501
            _from (str): The phone number that made the call, in E.164 format (e.g. +15555555555).. [optional]  # noqa: E501
            direction (CallDirectionEnum): [optional]  # noqa: E501
            state (str): The current state of the call. Current possible values are `queued`, `initiated`, `answered` and `disconnected`. Additional states may be added in the future, so your application must be tolerant of unknown values.. [optional]  # noqa: E501
            stir_shaken ({str: (str,)}, none_type): For inbound calls, the Bandwidth STIR/SHAKEN implementation will verify the information provided in the inbound invite request `Identity` header. The verification status is stored in the call state `stirShaken` property as follows.  | Property          | Description | |:------------------|:------------| | verstat | (optional) The verification status indicating whether the verification was successful or not. Possible values are `TN-Verification-Passed` or `TN-Verification-Failed`. | | attestationIndicator | (optional) The attestation level verified by Bandwidth. Possible values are `A` (full), `B` (partial) or `C` (gateway). | | originatingId | (optional) A unique origination identifier. |  Note that these are common properties but that the `stirShaken` object is free form and can contain other key-value pairs.  More information: [Understanding STIR/SHAKEN](https://www.bandwidth.com/regulations/stir-shaken). [optional]  # noqa: E501
            identity (str, none_type): The value of the `Identity` header from the inbound invite request. Only present for inbound calls and if the account is configured to forward this header.. [optional]  # noqa: E501
            enqueued_time (datetime, none_type): The time this call was placed in queue.. [optional]  # noqa: E501
            start_time (datetime, none_type): The time the call was initiated, in ISO 8601 format. `null` if the call is still in your queue.. [optional]  # noqa: E501
            answer_time (datetime, none_type): Populated once the call has been answered, with the time in ISO 8601 format.. [optional]  # noqa: E501
            end_time (datetime, none_type): Populated once the call has ended, with the time in ISO 8601 format.. [optional]  # noqa: E501
            disconnect_cause (str, none_type): | Cause | Description | |:------|:------------| | `hangup`| One party hung up the call, a [`<Hangup>`](../../bxml/verbs/hangup.md) verb was executed, or there was no more BXML to execute; it indicates that the call ended normally. | | `busy` | Callee was busy. | | `timeout` | Call wasn't answered before the `callTimeout` was reached. | | `cancel` | Call was cancelled by its originator while it was ringing. | | `rejected` | Call was rejected by the callee. | | `callback-error` | BXML callback couldn't be delivered to your callback server. | | `invalid-bxml` | Invalid BXML was returned in response to a callback. | | `application-error` | An unsupported action was tried on the call, e.g. trying to play a .ogg audio. | | `account-limit` | Account rate limits were reached. | | `node-capacity-exceeded` | System maximum capacity was reached. | | `error` | Some error not described in any of the other causes happened on the call. | | `unknown` | Unknown error happened on the call. |  Note: This list is not exhaustive and other values can appear in the future.. [optional]  # noqa: E501
            error_message (str, none_type): Populated only if the call ended with an error, with text explaining the reason.. [optional]  # noqa: E501
            error_id (str, none_type): Populated only if the call ended with an error, with a Bandwidth internal id that references the error event.. [optional]  # noqa: E501
            last_update (datetime): The last time the call had a state update, in ISO 8601 format.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
