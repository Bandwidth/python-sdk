# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from bandwidth.models.lookup_result import LookupResult
from bandwidth.models.lookup_status_enum import LookupStatusEnum

class LookupStatus(BaseModel):
    """
    If requestId exists, the result for that request is returned. See the Examples for details on the various responses that you can receive. Generally, if you see a Response Code of 0 in a result for a TN, information will be available for it.  Any other Response Code will indicate no information was available for the TN.
    """
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="The requestId.")
    status: Optional[LookupStatusEnum] = None
    result: Optional[conlist(LookupResult)] = Field(None, description="The carrier information results for the specified telephone number.")
    failed_telephone_numbers: Optional[conlist(StrictStr)] = Field(None, alias="failedTelephoneNumbers", description="The telephone numbers whose lookup failed.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["requestId", "status", "result", "failedTelephoneNumbers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LookupStatus:
        """Create an instance of LookupStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in result (list)
        _items = []
        if self.result:
            for _item in self.result:
                if _item:
                    _items.append(_item.to_dict())
            _dict['result'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LookupStatus:
        """Create an instance of LookupStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LookupStatus.parse_obj(obj)

        _obj = LookupStatus.parse_obj({
            "request_id": obj.get("requestId"),
            "status": obj.get("status"),
            "result": [LookupResult.from_dict(_item) for _item in obj.get("result")] if obj.get("result") is not None else None,
            "failed_telephone_numbers": obj.get("failedTelephoneNumbers")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


