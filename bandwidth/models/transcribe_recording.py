# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint, constr
from bandwidth.models.callback_method_enum import CallbackMethodEnum

class TranscribeRecording(BaseModel):
    """
    TranscribeRecording
    """
    callback_url: Optional[StrictStr] = Field(None, alias="callbackUrl", description="The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable) event to. You should not include sensitive or personally-identifiable information in the callbackUrl field! Always use the proper username and password fields for authorization.")
    callback_method: Optional[CallbackMethodEnum] = Field(None, alias="callbackMethod")
    username: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth username.")
    password: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth password.")
    tag: Optional[StrictStr] = Field(None, description="(optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.")
    callback_timeout: Optional[Union[confloat(le=25, ge=1, strict=True), conint(le=25, ge=1, strict=True)]] = Field(15, alias="callbackTimeout", description="This is the timeout (in seconds) to use when delivering the webhook to `callbackUrl`. Can be any numeric value (including decimals) between 1 and 25.")
    detect_language: Optional[StrictBool] = Field(False, alias="detectLanguage", description="A boolean value to indicate that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["callbackUrl", "callbackMethod", "username", "password", "tag", "callbackTimeout", "detectLanguage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TranscribeRecording:
        """Create an instance of TranscribeRecording from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if callback_method (nullable) is None
        # and __fields_set__ contains the field
        if self.callback_method is None and "callback_method" in self.__fields_set__:
            _dict['callbackMethod'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict['password'] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict['tag'] = None

        # set to None if callback_timeout (nullable) is None
        # and __fields_set__ contains the field
        if self.callback_timeout is None and "callback_timeout" in self.__fields_set__:
            _dict['callbackTimeout'] = None

        # set to None if detect_language (nullable) is None
        # and __fields_set__ contains the field
        if self.detect_language is None and "detect_language" in self.__fields_set__:
            _dict['detectLanguage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TranscribeRecording:
        """Create an instance of TranscribeRecording from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TranscribeRecording.parse_obj(obj)

        _obj = TranscribeRecording.parse_obj({
            "callback_url": obj.get("callbackUrl"),
            "callback_method": obj.get("callbackMethod"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "tag": obj.get("tag"),
            "callback_timeout": obj.get("callbackTimeout") if obj.get("callbackTimeout") is not None else 15,
            "detect_language": obj.get("detectLanguage") if obj.get("detectLanguage") is not None else False
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


