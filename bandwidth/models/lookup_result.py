# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class LookupResult(BaseModel):
    """
    Carrier information results for the specified telephone number.
    """
    response_code: Optional[StrictInt] = Field(None, alias="Response Code", description="Our vendor's response code.")
    message: Optional[StrictStr] = Field(None, alias="Message", description="Message associated with the response code.")
    e_164_format: Optional[StrictStr] = Field(None, alias="E.164 Format", description="The telephone number in E.164 format.")
    formatted: Optional[StrictStr] = Field(None, alias="Formatted", description="The formatted version of the telephone number.")
    country: Optional[StrictStr] = Field(None, alias="Country", description="The country of the telephone number.")
    line_type: Optional[StrictStr] = Field(None, alias="Line Type", description="The line type of the telephone number.")
    line_provider: Optional[StrictStr] = Field(None, alias="Line Provider", description="The messaging service provider of the telephone number.")
    mobile_country_code: Optional[StrictStr] = Field(None, alias="Mobile Country Code", description="The first half of the Home Network Identity (HNI).")
    mobile_network_code: Optional[StrictStr] = Field(None, alias="Mobile Network Code", description="The second half of the HNI.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["Response Code", "Message", "E.164 Format", "Formatted", "Country", "Line Type", "Line Provider", "Mobile Country Code", "Mobile Network Code"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LookupResult:
        """Create an instance of LookupResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LookupResult:
        """Create an instance of LookupResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LookupResult.parse_obj(obj)

        _obj = LookupResult.parse_obj({
            "response_code": obj.get("Response Code"),
            "message": obj.get("Message"),
            "e_164_format": obj.get("E.164 Format"),
            "formatted": obj.get("Formatted"),
            "country": obj.get("Country"),
            "line_type": obj.get("Line Type"),
            "line_provider": obj.get("Line Provider"),
            "mobile_country_code": obj.get("Mobile Country Code"),
            "mobile_network_code": obj.get("Mobile Network Code")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


