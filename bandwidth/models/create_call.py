# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, constr
from bandwidth.models.callback_method_enum import CallbackMethodEnum
from bandwidth.models.machine_detection_configuration import MachineDetectionConfiguration

class CreateCall(BaseModel):
    """
    CreateCall
    """
    to: StrictStr = Field(..., description="The destination to call (must be an E.164 formatted number (e.g. `+15555551212`) or a SIP URI (e.g. `sip:user@server.example`)).")
    var_from: StrictStr = Field(..., alias="from", description="A Bandwidth phone number on your account the call should come from (must be in E.164 format, like `+15555551212`, or be one of the following strings: `Restricted`, `Anonymous`, `Private`, or `Unavailable`).")
    display_name: Optional[constr(strict=True, max_length=256)] = Field(None, alias="displayName", description="The caller display name to use when the call is created.  May not exceed 256 characters nor contain control characters such as new lines.")
    uui: Optional[StrictStr] = Field(None, description="A comma-separated list of 'User-To-User' headers to be sent in the INVITE when calling a SIP URI. Each value must end with an 'encoding' parameter as described in <a href='https://tools.ietf.org/html/rfc7433'>RFC 7433</a>. Only 'jwt' and 'base64' encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators.")
    application_id: StrictStr = Field(..., alias="applicationId", description="The id of the application associated with the `from` number.")
    answer_url: constr(strict=True, max_length=2048) = Field(..., alias="answerUrl", description="The full URL to send the <a href='/docs/voice/webhooks/answer'>Answer</a> event to when the called party answers. This endpoint should return the first <a href='/docs/voice/bxml'>BXML document</a> to be executed in the call.  Must use `https` if specifying `username` and `password`.")
    answer_method: Optional[CallbackMethodEnum] = Field(None, alias="answerMethod")
    username: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth username.")
    password: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth password.")
    answer_fallback_url: Optional[constr(strict=True, max_length=2048)] = Field(None, alias="answerFallbackUrl", description="A fallback url which, if provided, will be used to retry the `answer` webhook delivery in case `answerUrl` fails to respond  Must use `https` if specifying `fallbackUsername` and `fallbackPassword`.")
    answer_fallback_method: Optional[CallbackMethodEnum] = Field(None, alias="answerFallbackMethod")
    fallback_username: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="fallbackUsername", description="Basic auth username.")
    fallback_password: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="fallbackPassword", description="Basic auth password.")
    disconnect_url: Optional[constr(strict=True, max_length=2048)] = Field(None, alias="disconnectUrl", description="The URL to send the <a href='/docs/voice/webhooks/disconnect'>Disconnect</a> event to when the call ends. This event does not expect a BXML response.")
    disconnect_method: Optional[CallbackMethodEnum] = Field(None, alias="disconnectMethod")
    call_timeout: Optional[Union[confloat(le=300, ge=1, strict=True), conint(le=300, ge=1, strict=True)]] = Field(30, alias="callTimeout", description="The timeout (in seconds) for the callee to answer the call after it starts ringing. If the call does not start ringing within 30s, the call will be cancelled regardless of this value.  Can be any numeric value (including decimals) between 1 and 300.")
    callback_timeout: Optional[Union[confloat(le=25, ge=1, strict=True), conint(le=25, ge=1, strict=True)]] = Field(15, alias="callbackTimeout", description="This is the timeout (in seconds) to use when delivering webhooks for the call. Can be any numeric value (including decimals) between 1 and 25.")
    machine_detection: Optional[MachineDetectionConfiguration] = Field(None, alias="machineDetection")
    priority: Optional[conint(strict=True, le=5, ge=1)] = Field(5, description="The priority of this call over other calls from your account. For example, if during a call your application needs to place a new call and bridge it with the current call, you might want to create the call with priority 1 so that it will be the next call picked off your queue, ahead of other less time sensitive calls. A lower value means higher priority, so a priority 1 call takes precedence over a priority 2 call.")
    tag: Optional[constr(strict=True, max_length=256)] = Field(None, description="A custom string that will be sent with all webhooks for this call unless overwritten by a future <a href='/docs/voice/bxml/tag'>`<Tag>`</a> verb or `tag` attribute on another verb, or cleared.  May be cleared by setting `tag=\"\"`  Max length 256 characters.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["to", "from", "displayName", "uui", "applicationId", "answerUrl", "answerMethod", "username", "password", "answerFallbackUrl", "answerFallbackMethod", "fallbackUsername", "fallbackPassword", "disconnectUrl", "disconnectMethod", "callTimeout", "callbackTimeout", "machineDetection", "priority", "tag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateCall:
        """Create an instance of CreateCall from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of machine_detection
        if self.machine_detection:
            _dict['machineDetection'] = self.machine_detection.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict['displayName'] = None

        # set to None if uui (nullable) is None
        # and __fields_set__ contains the field
        if self.uui is None and "uui" in self.__fields_set__:
            _dict['uui'] = None

        # set to None if answer_method (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_method is None and "answer_method" in self.__fields_set__:
            _dict['answerMethod'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict['password'] = None

        # set to None if answer_fallback_url (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_fallback_url is None and "answer_fallback_url" in self.__fields_set__:
            _dict['answerFallbackUrl'] = None

        # set to None if answer_fallback_method (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_fallback_method is None and "answer_fallback_method" in self.__fields_set__:
            _dict['answerFallbackMethod'] = None

        # set to None if fallback_username (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_username is None and "fallback_username" in self.__fields_set__:
            _dict['fallbackUsername'] = None

        # set to None if fallback_password (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_password is None and "fallback_password" in self.__fields_set__:
            _dict['fallbackPassword'] = None

        # set to None if disconnect_url (nullable) is None
        # and __fields_set__ contains the field
        if self.disconnect_url is None and "disconnect_url" in self.__fields_set__:
            _dict['disconnectUrl'] = None

        # set to None if disconnect_method (nullable) is None
        # and __fields_set__ contains the field
        if self.disconnect_method is None and "disconnect_method" in self.__fields_set__:
            _dict['disconnectMethod'] = None

        # set to None if call_timeout (nullable) is None
        # and __fields_set__ contains the field
        if self.call_timeout is None and "call_timeout" in self.__fields_set__:
            _dict['callTimeout'] = None

        # set to None if callback_timeout (nullable) is None
        # and __fields_set__ contains the field
        if self.callback_timeout is None and "callback_timeout" in self.__fields_set__:
            _dict['callbackTimeout'] = None

        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict['tag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateCall:
        """Create an instance of CreateCall from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateCall.parse_obj(obj)

        _obj = CreateCall.parse_obj({
            "to": obj.get("to"),
            "var_from": obj.get("from"),
            "display_name": obj.get("displayName"),
            "uui": obj.get("uui"),
            "application_id": obj.get("applicationId"),
            "answer_url": obj.get("answerUrl"),
            "answer_method": obj.get("answerMethod"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "answer_fallback_url": obj.get("answerFallbackUrl"),
            "answer_fallback_method": obj.get("answerFallbackMethod"),
            "fallback_username": obj.get("fallbackUsername"),
            "fallback_password": obj.get("fallbackPassword"),
            "disconnect_url": obj.get("disconnectUrl"),
            "disconnect_method": obj.get("disconnectMethod"),
            "call_timeout": obj.get("callTimeout") if obj.get("callTimeout") is not None else 30,
            "callback_timeout": obj.get("callbackTimeout") if obj.get("callbackTimeout") is not None else 15,
            "machine_detection": MachineDetectionConfiguration.from_dict(obj.get("machineDetection")) if obj.get("machineDetection") is not None else None,
            "priority": obj.get("priority") if obj.get("priority") is not None else 5,
            "tag": obj.get("tag")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


