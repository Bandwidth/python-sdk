# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, conint, constr, validator

class CodeRequest(BaseModel):
    """
    CodeRequest
    """
    to: constr(strict=True) = Field(..., description="The phone number to send the mfa code to.")
    var_from: constr(strict=True, max_length=32) = Field(..., alias="from", description="The application phone number, the sender of the mfa code.")
    application_id: constr(strict=True, max_length=50) = Field(..., alias="applicationId", description="The application unique ID, obtained from Bandwidth.")
    scope: Optional[constr(strict=True, max_length=25)] = Field(None, description="An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \"2FA\".")
    message: constr(strict=True, max_length=2048) = Field(..., description="The message format of the mfa code.  There are three values that the system will replace \"{CODE}\", \"{NAME}\", \"{SCOPE}\".  The \"{SCOPE}\" and \"{NAME} value template are optional, while \"{CODE}\" must be supplied.  As the name would suggest, code will be replace with the actual mfa code.  Name is replaced with the application name, configured during provisioning of mfa.  The scope value is the same value sent during the call and partitioned by the server.")
    digits: conint(strict=True, le=8, ge=4) = Field(..., description="The number of digits for your mfa code.  The valid number ranges from 2 to 8, inclusively.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["to", "from", "applicationId", "scope", "message", "digits"]

    @validator('to')
    def to_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\+[1-9]\d{1,14}$", value):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return value

    @validator('var_from')
    def var_from_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\+[1-9]\d{1,14}$", value):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CodeRequest:
        """Create an instance of CodeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CodeRequest:
        """Create an instance of CodeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CodeRequest.parse_obj(obj)

        _obj = CodeRequest.parse_obj({
            "to": obj.get("to"),
            "var_from": obj.get("from"),
            "application_id": obj.get("applicationId"),
            "scope": obj.get("scope"),
            "message": obj.get("message"),
            "digits": obj.get("digits")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


