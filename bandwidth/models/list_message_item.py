# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from bandwidth.models.list_message_direction_enum import ListMessageDirectionEnum
from bandwidth.models.message_status_enum import MessageStatusEnum
from bandwidth.models.message_type_enum import MessageTypeEnum

class ListMessageItem(BaseModel):
    """
    ListMessageItem
    """
    message_id: Optional[StrictStr] = Field(None, alias="messageId", description="The message id")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="The account id associated with this message.")
    source_tn: Optional[StrictStr] = Field(None, alias="sourceTn", description="The source phone number of the message.")
    destination_tn: Optional[StrictStr] = Field(None, alias="destinationTn", description="The recipient phone number of the message.")
    message_status: Optional[MessageStatusEnum] = Field(None, alias="messageStatus")
    message_direction: Optional[ListMessageDirectionEnum] = Field(None, alias="messageDirection")
    message_type: Optional[MessageTypeEnum] = Field(None, alias="messageType")
    segment_count: Optional[StrictInt] = Field(None, alias="segmentCount", description="The number of segments the message was sent as.")
    error_code: Optional[StrictInt] = Field(None, alias="errorCode", description="The numeric error code of the message.")
    receive_time: Optional[datetime] = Field(None, alias="receiveTime", description="The ISO 8601 datetime of the message.")
    carrier_name: Optional[StrictStr] = Field(None, alias="carrierName", description="The name of the carrier. Not currently supported for MMS coming soon.")
    message_size: Optional[StrictInt] = Field(None, alias="messageSize", description="The size of the message including message content and headers.")
    message_length: Optional[StrictInt] = Field(None, alias="messageLength", description="The length of the message content.")
    attachment_count: Optional[StrictInt] = Field(None, alias="attachmentCount", description="The number of attachments the message has.")
    recipient_count: Optional[StrictInt] = Field(None, alias="recipientCount", description="The number of recipients the message has.")
    campaign_class: Optional[StrictStr] = Field(None, alias="campaignClass", description="The campaign class of the message if it has one.")
    campaign_id: Optional[StrictStr] = Field(None, alias="campaignId", description="The campaign ID of the message if it has one.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["messageId", "accountId", "sourceTn", "destinationTn", "messageStatus", "messageDirection", "messageType", "segmentCount", "errorCode", "receiveTime", "carrierName", "messageSize", "messageLength", "attachmentCount", "recipientCount", "campaignClass", "campaignId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListMessageItem:
        """Create an instance of ListMessageItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if carrier_name (nullable) is None
        # and __fields_set__ contains the field
        if self.carrier_name is None and "carrier_name" in self.__fields_set__:
            _dict['carrierName'] = None

        # set to None if message_size (nullable) is None
        # and __fields_set__ contains the field
        if self.message_size is None and "message_size" in self.__fields_set__:
            _dict['messageSize'] = None

        # set to None if attachment_count (nullable) is None
        # and __fields_set__ contains the field
        if self.attachment_count is None and "attachment_count" in self.__fields_set__:
            _dict['attachmentCount'] = None

        # set to None if recipient_count (nullable) is None
        # and __fields_set__ contains the field
        if self.recipient_count is None and "recipient_count" in self.__fields_set__:
            _dict['recipientCount'] = None

        # set to None if campaign_class (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign_class is None and "campaign_class" in self.__fields_set__:
            _dict['campaignClass'] = None

        # set to None if campaign_id (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign_id is None and "campaign_id" in self.__fields_set__:
            _dict['campaignId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListMessageItem:
        """Create an instance of ListMessageItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListMessageItem.parse_obj(obj)

        _obj = ListMessageItem.parse_obj({
            "message_id": obj.get("messageId"),
            "account_id": obj.get("accountId"),
            "source_tn": obj.get("sourceTn"),
            "destination_tn": obj.get("destinationTn"),
            "message_status": obj.get("messageStatus"),
            "message_direction": obj.get("messageDirection"),
            "message_type": obj.get("messageType"),
            "segment_count": obj.get("segmentCount"),
            "error_code": obj.get("errorCode"),
            "receive_time": obj.get("receiveTime"),
            "carrier_name": obj.get("carrierName"),
            "message_size": obj.get("messageSize"),
            "message_length": obj.get("messageLength"),
            "attachment_count": obj.get("attachmentCount"),
            "recipient_count": obj.get("recipientCount"),
            "campaign_class": obj.get("campaignClass"),
            "campaign_id": obj.get("campaignId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


