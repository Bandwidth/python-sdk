# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from bandwidth.models.callback_method_enum import CallbackMethodEnum
from bandwidth.models.conference_member import ConferenceMember

class Conference(BaseModel):
    """
    Conference
    """
    id: Optional[StrictStr] = Field(None, description="The Bandwidth-generated conference ID.")
    name: Optional[StrictStr] = Field(None, description="The name of the conference, as specified by your application.")
    created_time: Optional[datetime] = Field(None, alias="createdTime", description="The time the conference was initiated, in ISO 8601 format.")
    completed_time: Optional[datetime] = Field(None, alias="completedTime", description="The time the conference was terminated, in ISO 8601 format.")
    conference_event_url: Optional[StrictStr] = Field(None, alias="conferenceEventUrl", description="The URL to send the conference-related events.")
    conference_event_method: Optional[CallbackMethodEnum] = Field(None, alias="conferenceEventMethod")
    tag: Optional[StrictStr] = Field(None, description="The custom string attached to the conference that will be sent with callbacks.")
    active_members: Optional[conlist(ConferenceMember)] = Field(None, alias="activeMembers", description="A list of active members of the conference. Omitted if this is a response to the [Get Conferences endpoint](/apis/voice#tag/Conferences/operation/listConferences).")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "name", "createdTime", "completedTime", "conferenceEventUrl", "conferenceEventMethod", "tag", "activeMembers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Conference:
        """Create an instance of Conference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in active_members (list)
        _items = []
        if self.active_members:
            for _item in self.active_members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activeMembers'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if completed_time (nullable) is None
        # and __fields_set__ contains the field
        if self.completed_time is None and "completed_time" in self.__fields_set__:
            _dict['completedTime'] = None

        # set to None if conference_event_url (nullable) is None
        # and __fields_set__ contains the field
        if self.conference_event_url is None and "conference_event_url" in self.__fields_set__:
            _dict['conferenceEventUrl'] = None

        # set to None if conference_event_method (nullable) is None
        # and __fields_set__ contains the field
        if self.conference_event_method is None and "conference_event_method" in self.__fields_set__:
            _dict['conferenceEventMethod'] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict['tag'] = None

        # set to None if active_members (nullable) is None
        # and __fields_set__ contains the field
        if self.active_members is None and "active_members" in self.__fields_set__:
            _dict['activeMembers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Conference:
        """Create an instance of Conference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Conference.parse_obj(obj)

        _obj = Conference.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created_time": obj.get("createdTime"),
            "completed_time": obj.get("completedTime"),
            "conference_event_url": obj.get("conferenceEventUrl"),
            "conference_event_method": obj.get("conferenceEventMethod"),
            "tag": obj.get("tag"),
            "active_members": [ConferenceMember.from_dict(_item) for _item in obj.get("activeMembers")] if obj.get("activeMembers") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


