# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from bandwidth.models.priority_enum import PriorityEnum

class MessageRequest(BaseModel):
    """
    MessageRequest
    """
    application_id: StrictStr = Field(..., alias="applicationId", description="The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.")
    to: conlist(StrictStr, unique_items=True) = Field(..., description="The phone number(s) the message should be sent to in E164 format.")
    var_from: StrictStr = Field(..., alias="from", description="One of your telephone numbers the message should come from in E164 format.")
    text: Optional[constr(strict=True, max_length=2048)] = Field(None, description="The contents of the text message. Must be 2048 characters or less.")
    media: Optional[conlist(constr(strict=True, max_length=4096))] = Field(None, description="A list of URLs to include as media attachments as part of the message. Each URL can be at most 4096 characters.")
    tag: Optional[StrictStr] = Field(None, description="A custom string that will be included in callback events of the message. Max 1024 characters.")
    priority: Optional[PriorityEnum] = None
    expiration: Optional[datetime] = Field(None, description="A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future. Not supported on MMS.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["applicationId", "to", "from", "text", "media", "tag", "priority", "expiration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MessageRequest:
        """Create an instance of MessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MessageRequest:
        """Create an instance of MessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MessageRequest.parse_obj(obj)

        _obj = MessageRequest.parse_obj({
            "application_id": obj.get("applicationId"),
            "to": obj.get("to"),
            "var_from": obj.get("from"),
            "text": obj.get("text"),
            "media": obj.get("media"),
            "tag": obj.get("tag"),
            "priority": obj.get("priority"),
            "expiration": obj.get("expiration")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


