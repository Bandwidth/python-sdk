# coding: utf-8

"""
    Bandwidth

    Bandwidth's Communication APIs

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr
from bandwidth.models.callback_method_enum import CallbackMethodEnum

class CreateCallResponse(BaseModel):
    """
    CreateCallResponse
    """
    application_id: StrictStr = Field(..., alias="applicationId", description="The id of the application associated with the `from` number.")
    account_id: StrictStr = Field(..., alias="accountId", description="The bandwidth account ID associated with the call.")
    call_id: StrictStr = Field(..., alias="callId", description="Programmable Voice API Call ID.")
    to: StrictStr = Field(..., description="Recipient of the outgoing call.")
    var_from: StrictStr = Field(..., alias="from", description="Phone number that created the outbound call.")
    enqueued_time: Optional[datetime] = Field(None, alias="enqueuedTime", description="The time at which the call was accepted into the queue.")
    call_url: StrictStr = Field(..., alias="callUrl", description="The URL to update this call's state.")
    call_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="callTimeout", description="The timeout (in seconds) for the callee to answer the call after it starts ringing.")
    callback_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="callbackTimeout", description="This is the timeout (in seconds) to use when delivering webhooks for the call.")
    tag: Optional[StrictStr] = Field(None, description="Custom tag value.")
    answer_method: Optional[CallbackMethodEnum] = Field(..., alias="answerMethod")
    answer_url: StrictStr = Field(..., alias="answerUrl", description="URL to deliver the `answer` event webhook.")
    answer_fallback_method: Optional[CallbackMethodEnum] = Field(None, alias="answerFallbackMethod")
    answer_fallback_url: Optional[StrictStr] = Field(None, alias="answerFallbackUrl", description="Fallback URL to deliver the `answer` event webhook.")
    disconnect_method: Optional[CallbackMethodEnum] = Field(..., alias="disconnectMethod")
    disconnect_url: Optional[StrictStr] = Field(None, alias="disconnectUrl", description="URL to deliver the `disconnect` event webhook.")
    username: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth username.")
    password: Optional[constr(strict=True, max_length=1024)] = Field(None, description="Basic auth password.")
    fallback_username: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="fallbackUsername", description="Basic auth username.")
    fallback_password: Optional[constr(strict=True, max_length=1024)] = Field(None, alias="fallbackPassword", description="Basic auth password.")
    priority: Optional[StrictInt] = Field(None, description="The priority of this call over other calls from your account.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["applicationId", "accountId", "callId", "to", "from", "enqueuedTime", "callUrl", "callTimeout", "callbackTimeout", "tag", "answerMethod", "answerUrl", "answerFallbackMethod", "answerFallbackUrl", "disconnectMethod", "disconnectUrl", "username", "password", "fallbackUsername", "fallbackPassword", "priority"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateCallResponse:
        """Create an instance of CreateCallResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if enqueued_time (nullable) is None
        # and __fields_set__ contains the field
        if self.enqueued_time is None and "enqueued_time" in self.__fields_set__:
            _dict['enqueuedTime'] = None

        # set to None if tag (nullable) is None
        # and __fields_set__ contains the field
        if self.tag is None and "tag" in self.__fields_set__:
            _dict['tag'] = None

        # set to None if answer_method (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_method is None and "answer_method" in self.__fields_set__:
            _dict['answerMethod'] = None

        # set to None if answer_fallback_method (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_fallback_method is None and "answer_fallback_method" in self.__fields_set__:
            _dict['answerFallbackMethod'] = None

        # set to None if answer_fallback_url (nullable) is None
        # and __fields_set__ contains the field
        if self.answer_fallback_url is None and "answer_fallback_url" in self.__fields_set__:
            _dict['answerFallbackUrl'] = None

        # set to None if disconnect_method (nullable) is None
        # and __fields_set__ contains the field
        if self.disconnect_method is None and "disconnect_method" in self.__fields_set__:
            _dict['disconnectMethod'] = None

        # set to None if disconnect_url (nullable) is None
        # and __fields_set__ contains the field
        if self.disconnect_url is None and "disconnect_url" in self.__fields_set__:
            _dict['disconnectUrl'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and __fields_set__ contains the field
        if self.password is None and "password" in self.__fields_set__:
            _dict['password'] = None

        # set to None if fallback_username (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_username is None and "fallback_username" in self.__fields_set__:
            _dict['fallbackUsername'] = None

        # set to None if fallback_password (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_password is None and "fallback_password" in self.__fields_set__:
            _dict['fallbackPassword'] = None

        # set to None if priority (nullable) is None
        # and __fields_set__ contains the field
        if self.priority is None and "priority" in self.__fields_set__:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateCallResponse:
        """Create an instance of CreateCallResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateCallResponse.parse_obj(obj)

        _obj = CreateCallResponse.parse_obj({
            "application_id": obj.get("applicationId"),
            "account_id": obj.get("accountId"),
            "call_id": obj.get("callId"),
            "to": obj.get("to"),
            "var_from": obj.get("from"),
            "enqueued_time": obj.get("enqueuedTime"),
            "call_url": obj.get("callUrl"),
            "call_timeout": obj.get("callTimeout"),
            "callback_timeout": obj.get("callbackTimeout"),
            "tag": obj.get("tag"),
            "answer_method": obj.get("answerMethod"),
            "answer_url": obj.get("answerUrl"),
            "answer_fallback_method": obj.get("answerFallbackMethod"),
            "answer_fallback_url": obj.get("answerFallbackUrl"),
            "disconnect_method": obj.get("disconnectMethod"),
            "disconnect_url": obj.get("disconnectUrl"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "fallback_username": obj.get("fallbackUsername"),
            "fallback_password": obj.get("fallbackPassword"),
            "priority": obj.get("priority")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


