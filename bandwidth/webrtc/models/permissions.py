# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Permissions(object):

    """Implementation of the 'Permissions' model.

    TODO: type model description here.

    Attributes:
        can_publish (bool): Whether this participant is allowed to publish
            media
        media_type (MediaTypeEnum): The type of media the participant is
            allowed to publish  VIDEO permission implies AUDIO permission as
            well

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "can_publish": 'canPublish',
        "media_type": 'mediaType'
    }

    def __init__(self,
                 can_publish=True,
                 media_type='AUDIO'):
        """Constructor for the Permissions class"""

        # Initialize members of the class
        self.can_publish = can_publish
        self.media_type = media_type

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        can_publish = dictionary.get("canPublish") if dictionary.get("canPublish") else True
        media_type = dictionary.get("mediaType") if dictionary.get("mediaType") else 'AUDIO'

        # Return an object of this model
        return cls(can_publish,
                   media_type)
