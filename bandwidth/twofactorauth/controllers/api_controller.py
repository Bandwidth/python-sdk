# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.twofactorauth.controllers.base_controller import BaseController
from bandwidth.http.auth.two_factor_auth_basic_auth import TwoFactorAuthBasicAuth
from bandwidth.twofactorauth.models.two_factor_voice_response import TwoFactorVoiceResponse
from bandwidth.twofactorauth.models.two_factor_messaging_response import TwoFactorMessagingResponse
from bandwidth.twofactorauth.models.two_factor_verify_code_response import TwoFactorVerifyCodeResponse
from bandwidth.twofactorauth.exceptions.invalid_request_exception import InvalidRequestException


class APIController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(APIController, self).__init__(config, call_back)

    def create_voice_two_factor(self,
                                account_id,
                                body):
        """Does a POST request to /accounts/{accountId}/code/voice.

        Two-Factor authentication with Bandwidth Voice services

        Args:
            account_id (string): Bandwidth Account ID with Voice service
                enabled
            body (TwoFactorCodeRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/voice'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.TWOFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        TwoFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise InvalidRequestException('client request error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorVoiceResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def create_messaging_two_factor(self,
                                    account_id,
                                    body):
        """Does a POST request to /accounts/{accountId}/code/messaging.

        Two-Factor authentication with Bandwidth messaging services

        Args:
            account_id (string): Bandwidth Account ID with Messaging service
                enabled
            body (TwoFactorCodeRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/messaging'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.TWOFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        TwoFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise InvalidRequestException('client request error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorMessagingResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def create_verify_two_factor(self,
                                 account_id,
                                 body):
        """Does a POST request to /accounts/{accountId}/code/verify.

        Verify a previously sent two-factor authentication code

        Args:
            account_id (string): Bandwidth Account ID with Two-Factor enabled
            body (TwoFactorVerifyRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/verify'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.TWOFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        TwoFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise InvalidRequestException('client request error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorVerifyCodeResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result
