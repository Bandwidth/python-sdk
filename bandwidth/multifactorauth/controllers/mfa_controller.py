# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.multifactorauth.controllers.base_controller import BaseController
from bandwidth.http.auth.multi_factor_auth_basic_auth import MultiFactorAuthBasicAuth
from bandwidth.multifactorauth.models.two_factor_voice_response import TwoFactorVoiceResponse
from bandwidth.multifactorauth.models.two_factor_messaging_response import TwoFactorMessagingResponse
from bandwidth.multifactorauth.models.two_factor_verify_code_response import TwoFactorVerifyCodeResponse
from bandwidth.multifactorauth.exceptions.error_with_request_exception import ErrorWithRequestException
from bandwidth.multifactorauth.exceptions.unauthorized_request_exception import UnauthorizedRequestException
from bandwidth.multifactorauth.exceptions.forbidden_request_exception import ForbiddenRequestException


class MFAController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(MFAController, self).__init__(config, call_back)

    def create_voice_two_factor(self,
                                account_id,
                                body):
        """Does a POST request to /accounts/{accountId}/code/voice.

        Multi-Factor authentication with Bandwidth Voice services. Allows for
        a user to send an MFA code via a phone call.

        Args:
            account_id (string): Bandwidth Account ID with Voice service
                enabled
            body (TwoFactorCodeRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/voice'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.MULTIFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        MultiFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorWithRequestException('If there is any issue with values passed in by the user', _response)
        elif _response.status_code == 401:
            raise UnauthorizedRequestException('Authentication is either incorrect or not present', _response)
        elif _response.status_code == 403:
            raise ForbiddenRequestException('The user is not authorized to access this resource', _response)
        elif _response.status_code == 500:
            raise ErrorWithRequestException('An internal server error occurred', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorVoiceResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def create_messaging_two_factor(self,
                                    account_id,
                                    body):
        """Does a POST request to /accounts/{accountId}/code/messaging.

        Multi-Factor authentication with Bandwidth Messaging services. Allows
        a user to send an MFA code via a text message (SMS).

        Args:
            account_id (string): Bandwidth Account ID with Messaging service
                enabled
            body (TwoFactorCodeRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/messaging'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.MULTIFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        MultiFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorWithRequestException('If there is any issue with values passed in by the user', _response)
        elif _response.status_code == 401:
            raise UnauthorizedRequestException('Authentication is either incorrect or not present', _response)
        elif _response.status_code == 403:
            raise ForbiddenRequestException('The user is not authorized to access this resource', _response)
        elif _response.status_code == 500:
            raise ErrorWithRequestException('An internal server error occurred', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorMessagingResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def create_verify_two_factor(self,
                                 account_id,
                                 body):
        """Does a POST request to /accounts/{accountId}/code/verify.

        Allows a user to verify an MFA code.

        Args:
            account_id (string): Bandwidth Account ID with Two-Factor enabled
            body (TwoFactorVerifyRequestSchema): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/code/verify'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.MULTIFACTORAUTHDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        MultiFactorAuthBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorWithRequestException('If there is any issue with values passed in by the user', _response)
        elif _response.status_code == 401:
            raise UnauthorizedRequestException('Authentication is either incorrect or not present', _response)
        elif _response.status_code == 403:
            raise ForbiddenRequestException('The user is not authorized to access this resource', _response)
        elif _response.status_code == 429:
            raise ErrorWithRequestException('The user has made too many bad requests and is temporarily locked out', _response)
        elif _response.status_code == 500:
            raise ErrorWithRequestException('An internal server error occurred', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TwoFactorVerifyCodeResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result
