# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.voice.controllers.base_controller import BaseController
from bandwidth.http.auth.voice_basic_auth import VoiceBasicAuth
from bandwidth.voice.models.api_call_response import ApiCallResponse
from bandwidth.voice.models.recording_metadata_response import RecordingMetadataResponse
from bandwidth.voice.exceptions.error_response_exception import ErrorResponseException
from bandwidth.exceptions.api_exception import APIException


class APIController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(APIController, self).__init__(config, call_back)

    def create_call(self,
                    account_id,
                    body=None):
        """Does a POST request to /api/v2/accounts/{accountId}/calls.

        Creates a call request

        Args:
            account_id (string): TODO: type description here.
            body (ApiCreateCallRequest, optional): TODO: type description
                here.

        Returns:
            ApiCallResponse: Response from the API. Successfully created call

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApiCallResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def modify_call(self,
                    account_id,
                    call_id,
                    body=None):
        """Does a POST request to /api/v2/accounts/{accountId}/calls/{callId}.

        Interrupts and replaces an active call's BXML document

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ApiModifyCallRequest, optional): TODO: type description
                here.

        Returns:
            void: Response from the API. Successfully updated call

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise APIException('The call can\'t be modified in its current state', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 404:
            raise APIException('The call never existed, no longer exists, or is inaccessible to you', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        ApiResponse(_response)
    def modify_call_recording_state(self,
                                    account_id,
                                    call_id,
                                    body=None):
        """Does a PUT request to /api/v2/accounts/{accountId}/calls/{callId}/recording.

        Pauses or resumes a recording

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ModifyCallRecordingState, optional): TODO: type description
                here.

        Returns:
            void: Response from the API. Successfully updated recording state
                of call

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recording'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise APIException('The call can\'t be modified in its current state', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 404:
            raise APIException('The call never existed, no longer exists, or is inaccessible to you', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        ApiResponse(_response)
    def get_query_metadata_for_account_and_call(self,
                                                account_id,
                                                call_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings.

        Returns a (potentially empty) list of metadata for the recordings that
        took place during the specified call

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.

        Returns:
            list of RecordingMetadataResponse: Response from the API.
                Successfully queried metadata

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RecordingMetadataResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_metadata_for_recording(self,
                                   account_id,
                                   call_id,
                                   recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}.

        Returns metadata for the specified recording

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            RecordingMetadataResponse: Response from the API. Metadata found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id,
            'recordingId': recording_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 404:
            raise APIException('The recording never existed, no longer exists, or is inaccessible to you', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RecordingMetadataResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def delete_recording(self,
                         account_id,
                         call_id,
                         recording_id):
        """Does a DELETE request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}.

        Deletes the specified recording

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            void: Response from the API. Successfully deleted recording

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id,
            'recordingId': recording_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 404:
            raise APIException('The recording never existed, no longer exists, or is inaccessible to you', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        ApiResponse(_response)
    def get_stream_recording_media(self,
                                   account_id,
                                   call_id,
                                   recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media.

        Downloads the specified recording

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            binary: Response from the API. Recording media found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id,
            'recordingId': recording_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request, binary=True)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 404:
            raise APIException('The recording never existed, no longer exists, or is inaccessible to you', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = _response.text
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_query_metadata_for_account(self,
                                       account_id):
        """Does a GET request to /api/v2/accounts/{accountId}/recordings.

        Returns a (potentially empty; capped at 1000) list of metadata for the
        recordings associated with the specified account

        Args:
            account_id (string): TODO: type description here.

        Returns:
            list of RecordingMetadataResponse: Response from the API.
                Successfully queried metadata

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/recordings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ErrorResponseException('Something didn\'t look right about that request. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Please authenticate yourself', _response)
        elif _response.status_code == 403:
            raise ErrorResponseException('Your credentials are invalid. Please use your API credentials for the Bandwidth Dashboard.', _response)
        elif _response.status_code == 415:
            raise ErrorResponseException('We don\'t support that media type. Please send us `application/json`.', _response)
        elif _response.status_code == 429:
            raise ErrorResponseException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ErrorResponseException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RecordingMetadataResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result
