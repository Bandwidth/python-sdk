# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.voice.controllers.base_controller import BaseController
from bandwidth.http.auth.voice_basic_auth import VoiceBasicAuth
from bandwidth.voice.models.create_call_response import CreateCallResponse
from bandwidth.voice.models.call_state import CallState
from bandwidth.voice.models.call_recording_metadata import CallRecordingMetadata
from bandwidth.voice.models.transcription_response import TranscriptionResponse
from bandwidth.voice.models.conference_state import ConferenceState
from bandwidth.voice.models.conference_member_state import ConferenceMemberState
from bandwidth.voice.models.conference_recording_metadata import ConferenceRecordingMetadata
from bandwidth.voice.exceptions.api_error_exception import ApiErrorException
from bandwidth.exceptions.api_exception import APIException


class APIController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(APIController, self).__init__(config, call_back)

    def create_call(self,
                    account_id,
                    body):
        """Does a POST request to /api/v2/accounts/{accountId}/calls.

        Creates an outbound phone call.

        Args:
            account_id (string): TODO: type description here.
            body (CreateCallRequest): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Call
                successfully created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateCallResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_call(self,
                 account_id,
                 call_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}.

        Returns near-realtime metadata about the specified call.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Call
                found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CallState.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def modify_call(self,
                    account_id,
                    call_id,
                    body):
        """Does a POST request to /api/v2/accounts/{accountId}/calls/{callId}.

        Interrupts and replaces an active call's BXML document.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ModifyCallRequest): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Call
                successfully modified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)
    
    def modify_call_bxml(self, account_id, call_id, body):
        """Does a PUT request to /api/v2/accounts/{accountId}/calls/{callId}/bxml.
        
        Interrupts and replaces an active call's BXML document, sending the new BXML.

        Args: 
            account_id (string): Bandwidth Account ID. Ex: "99001234"
            call_id (string): ID of the call for which you wish to replace the active BXML instructions. 
            body (string): XML string in valid BXML format
        """
        
        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/bxml'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/xml; charset=utf-8'
        }

                # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=body)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

    def modify_call_recording_state(self,
                                    account_id,
                                    call_id,
                                    body):
        """Does a PUT request to /api/v2/accounts/{accountId}/calls/{callId}/recording.

        Pauses or resumes a recording.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ModifyCallRecordingRequest): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Recording
                state successfully modified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recording'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def get_call_recordings(self,
                            account_id,
                            call_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings.

        Returns a (potentially empty) list of metadata for the recordings that
        took place during the specified call.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Recordings retrieved successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CallRecordingMetadata.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_call_recording(self,
                           account_id,
                           call_id,
                           recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}.

        Returns metadata for the specified recording.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Recording
                found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CallRecordingMetadata.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def delete_recording(self,
                         account_id,
                         call_id,
                         recording_id):
        """Does a DELETE request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}.

        Deletes the specified recording.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. The
                recording was successfully deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def get_download_call_recording(self,
                                    account_id,
                                    call_id,
                                    recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media.

        Downloads the specified recording.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Media
                found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def delete_recording_media(self,
                               account_id,
                               call_id,
                               recording_id):
        """Does a DELETE request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media.

        Deletes the specified recording's media.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. The
                recording media was successfully deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def get_call_transcription(self,
                               account_id,
                               call_id,
                               recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription.

        Downloads the specified transcription.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Transcription found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TranscriptionResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def create_transcribe_call_recording(self,
                                         account_id,
                                         call_id,
                                         recording_id,
                                         body):
        """Does a POST request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription.

        Requests that the specified recording be transcribed.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.
            body (TranscribeRecordingRequest): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Transcription successfully requested

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 410:
            raise ApiErrorException('The media for this recording has been deleted, so we can\'t transcribe it', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def delete_call_transcription(self,
                                  account_id,
                                  call_id,
                                  recording_id):
        """Does a DELETE request to /api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription.

        Deletes the specified recording's transcription.

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. The
                transcription was successfully deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def get_conferences(self,
                        account_id,
                        name=None,
                        min_created_time=None,
                        max_created_time=None,
                        page_size=1000,
                        page_token=None):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences.

        Returns information about the conferences in the account.

        Args:
            account_id (string): TODO: type description here.
            name (string, optional): TODO: type description here.
            min_created_time (string, optional): TODO: type description here.
            max_created_time (string, optional): TODO: type description here.
            page_size (int, optional): TODO: type description here. Example:
                1000
            page_token (string, optional): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Conferences retrieved successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_parameters = {
            'name': name,
            'minCreatedTime': min_created_time,
            'maxCreatedTime': max_created_time,
            'pageSize': page_size,
            'pageToken': page_token
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ConferenceState.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_conference(self,
                       account_id,
                       conference_id):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences/{conferenceId}.

        Returns information about the specified conference.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Conference found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ConferenceState.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def modify_conference(self,
                          account_id,
                          conference_id,
                          body):
        """Does a POST request to /api/v2/accounts/{accountId}/conferences/{conferenceId}.

        Modify the conference state.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.
            body (ModifyConferenceRequest): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Conference successfully modified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def modify_conference_member(self,
                                 account_id,
                                 conference_id,
                                 call_id,
                                 body):
        """Does a PUT request to /api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}.

        Updates settings for a particular conference member.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ConferenceMemberState): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Conference member successfully modified

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False},
            'callId': {'value': call_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        # Return appropriate type
        return ApiResponse(_response)

    def get_conference_member(self,
                              account_id,
                              conference_id,
                              member_id):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}.

        Returns information about the specified conference member.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.
            member_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Conference member found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False},
            'memberId': {'value': member_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ConferenceMemberState.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_conference_recordings(self,
                                  account_id,
                                  conference_id):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings.

        Returns a (potentially empty) list of metadata for the recordings that
        took place during the specified conference

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Recordings retrieved successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ConferenceRecordingMetadata.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_conference_recording(self,
                                 account_id,
                                 conference_id,
                                 recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}.

        Returns metadata for the specified recording.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Recording
                found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CallRecordingMetadata.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_download_conference_recording(self,
                                          account_id,
                                          conference_id,
                                          recording_id):
        """Does a GET request to /api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media.

        Downloads the specified recording.

        Args:
            account_id (string): TODO: type description here.
            conference_id (string): TODO: type description here.
            recording_id (string): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Media
                found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False},
            'conferenceId': {'value': conference_id, 'encode': False},
            'recordingId': {'value': recording_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def get_query_call_recordings(self,
                                  account_id,
                                  mfrom=None,
                                  to=None,
                                  min_start_time=None,
                                  max_start_time=None):
        """Does a GET request to /api/v2/accounts/{accountId}/recordings.

        Returns a list of metadata for the recordings associated with the
        specified account. The list can be filtered by the optional from, to,
        minStartTime, and maxStartTime arguments. The list is capped at 1000
        entries and may be empty if no recordings match the specified
        criteria.

        Args:
            account_id (string): TODO: type description here.
            mfrom (string, optional): TODO: type description here.
            to (string, optional): TODO: type description here.
            min_start_time (string, optional): TODO: type description here.
            max_start_time (string, optional): TODO: type description here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers.
                Recordings retrieved successfully.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/accounts/{accountId}/recordings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': {'value': account_id, 'encode': False}
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_parameters = {
            'from': mfrom,
            'to': to,
            'minStartTime': min_start_time,
            'maxStartTime': max_start_time
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise ApiErrorException('Something\'s not quite right... Your request is invalid. Please fix it before trying again.', _response)
        elif _response.status_code == 401:
            raise APIException('Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.', _response)
        elif _response.status_code == 403:
            raise ApiErrorException('User unauthorized to perform this action.', _response)
        elif _response.status_code == 404:
            raise ApiErrorException('The resource specified cannot be found or does not belong to you.', _response)
        elif _response.status_code == 415:
            raise ApiErrorException('We don\'t support that media type. If a request body is required, please send it to us as `application/json`.', _response)
        elif _response.status_code == 429:
            raise ApiErrorException('You\'re sending requests to this endpoint too frequently. Please slow your request rate down and try again.', _response)
        elif _response.status_code == 500:
            raise ApiErrorException('Something unexpected happened. Please try again.', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CallRecordingMetadata.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result
