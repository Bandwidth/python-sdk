# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Transcription(object):

    """Implementation of the 'Transcription' model.

    TODO: type model description here.

    Attributes:
        id (string): TODO: type description here.
        status (Status3Enum): TODO: type description here.
        completed_time (string): TODO: type description here.
        url (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "status": 'status',
        "completed_time": 'completedTime',
        "url": 'url'
    }

    def __init__(self,
                 id=None,
                 status=None,
                 completed_time=None,
                 url=None):
        """Constructor for the Transcription class"""

        # Initialize members of the class
        self.id = id
        self.status = status
        self.completed_time = completed_time
        self.url = url

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        status = dictionary.get('status')
        completed_time = dictionary.get('completedTime')
        url = dictionary.get('url')

        # Return an object of this model
        return cls(id,
                   status,
                   completed_time,
                   url)
