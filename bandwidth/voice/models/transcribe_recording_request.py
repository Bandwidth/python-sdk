# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class TranscribeRecordingRequest(object):
    """Implementation of the 'TranscribeRecordingRequest' model.

    TODO: type model description here.

    Attributes:
        detect_language (bool): Indicates that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish.
        callback_url (string): TODO: type description here.
        callback_method (CallbackMethodEnum): TODO: type description here.
        username (string): TODO: type description here.
        password (string): TODO: type description here.
        tag (string): TODO: type description here.
        callback_timeout (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "detect_language": "detectLanguage",
        "callback_url": 'callbackUrl',
        "callback_method": 'callbackMethod',
        "username": 'username',
        "password": 'password',
        "tag": 'tag',
        "callback_timeout": 'callbackTimeout'
    }

    def __init__(self,
                 detect_language=None,
                 callback_url=None,
                 callback_method=None,
                 username=None,
                 password=None,
                 tag=None,
                 callback_timeout=None):
        """Constructor for the TranscribeRecordingRequest class"""

        # Initialize members of the class
        self.detect_language = detect_language
        self.callback_url = callback_url
        self.callback_method = callback_method
        self.username = username
        self.password = password
        self.tag = tag
        self.callback_timeout = callback_timeout

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        detect_language = dictionary.get('detectLanguage')
        callback_url = dictionary.get('callbackUrl')
        callback_method = dictionary.get('callbackMethod')
        username = dictionary.get('username')
        password = dictionary.get('password')
        tag = dictionary.get('tag')
        callback_timeout = dictionary.get('callbackTimeout')

        # Return an object of this model
        return cls(detect_language,
                   callback_url,
                   callback_method,
                   username,
                   password,
                   tag,
                   callback_timeout)
