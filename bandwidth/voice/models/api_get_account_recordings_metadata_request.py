# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""
from bandwidth.api_helper import APIHelper


class ApiGetAccountRecordingsMetadataRequest(object):

    """Implementation of the 'ApiGetAccountRecordingsMetadataRequest' model.

    TODO: type model description here.

    Attributes:
        mfrom (string): Format is E164
        to (string): Format is E164
        min_start_time (datetime): ISO8601 format
        max_start_time (datetime): ISO8601 format

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mfrom": 'from',
        "to": 'to',
        "min_start_time": 'minStartTime',
        "max_start_time": 'maxStartTime'
    }

    def __init__(self,
                 mfrom=None,
                 to=None,
                 min_start_time=None,
                 max_start_time=None):
        """Constructor for the ApiGetAccountRecordingsMetadataRequest class"""

        # Initialize members of the class
        self.mfrom = mfrom
        self.to = to
        self.min_start_time = APIHelper.RFC3339DateTime(min_start_time) if min_start_time else None
        self.max_start_time = APIHelper.RFC3339DateTime(max_start_time) if max_start_time else None

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mfrom = dictionary.get('from')
        to = dictionary.get('to')
        min_start_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("minStartTime")).datetime if dictionary.get("minStartTime") else None
        max_start_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("maxStartTime")).datetime if dictionary.get("maxStartTime") else None

        # Return an object of this model
        return cls(mfrom,
                   to,
                   min_start_time,
                   max_start_time)
