# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ModifyCallRequest(object):

    """Implementation of the 'ModifyCallRequest' model.

    TODO: type model description here.

    Attributes:
        state (StateEnum): TODO: type description here.
        redirect_url (string): Required if state is 'active'
        redirect_fallback_url (string): TODO: type description here.
        redirect_method (RedirectMethodEnum): TODO: type description here.
        redirect_fallback_method (RedirectFallbackMethodEnum): TODO: type
            description here.
        username (string): TODO: type description here.
        password (string): TODO: type description here.
        fallback_username (string): TODO: type description here.
        fallback_password (string): TODO: type description here.
        tag (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "state": 'state',
        "redirect_url": 'redirectUrl',
        "redirect_fallback_url": 'redirectFallbackUrl',
        "redirect_method": 'redirectMethod',
        "redirect_fallback_method": 'redirectFallbackMethod',
        "username": 'username',
        "password": 'password',
        "fallback_username": 'fallbackUsername',
        "fallback_password": 'fallbackPassword',
        "tag": 'tag'
    }

    def __init__(self,
                 state='active',
                 redirect_url=None,
                 redirect_fallback_url=None,
                 redirect_method=None,
                 redirect_fallback_method=None,
                 username=None,
                 password=None,
                 fallback_username=None,
                 fallback_password=None,
                 tag=None):
        """Constructor for the ModifyCallRequest class"""

        # Initialize members of the class
        self.state = state
        self.redirect_url = redirect_url
        self.redirect_fallback_url = redirect_fallback_url
        self.redirect_method = redirect_method
        self.redirect_fallback_method = redirect_fallback_method
        self.username = username
        self.password = password
        self.fallback_username = fallback_username
        self.fallback_password = fallback_password
        self.tag = tag

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        state = dictionary.get("state") if dictionary.get("state") else 'active'
        redirect_url = dictionary.get('redirectUrl')
        redirect_fallback_url = dictionary.get('redirectFallbackUrl')
        redirect_method = dictionary.get('redirectMethod')
        redirect_fallback_method = dictionary.get('redirectFallbackMethod')
        username = dictionary.get('username')
        password = dictionary.get('password')
        fallback_username = dictionary.get('fallbackUsername')
        fallback_password = dictionary.get('fallbackPassword')
        tag = dictionary.get('tag')

        # Return an object of this model
        return cls(state,
                   redirect_url,
                   redirect_fallback_url,
                   redirect_method,
                   redirect_fallback_method,
                   username,
                   password,
                   fallback_username,
                   fallback_password,
                   tag)
