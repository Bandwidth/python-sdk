# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class MachineDetectionConfiguration(object):

    """Implementation of the 'MachineDetectionRequest' model.

    TODO: type model description here.

    Attributes:
        mode (ModeEnum): The machine detection mode. If set to 'async', the
            detection result will be sent in a 'machineDetectionComplete'
            callback. If set to 'sync', the 'answer' callback will wait for
            the machine detection to complete and will include its result.
            Default is 'async'.
        detection_timeout (float): Total amount of time (in seconds) before
            giving up.
        silence_timeout (float): If no speech is detected in this period, a
            callback with a 'silence' result is sent. Default is 10 seconds.
        speech_threshold (float): When speech has ended and a result couldn't
            be determined based on the audio content itself, this value is
            used to determine if the speaker is a machine based on the speech
            duration. If the length of the speech detected is greater than or
            equal to this threshold, the result will be 'answering-machine'.
            If the length of speech detected is below this threshold, the
            result will be 'human'. Default is 10 seconds.
        speech_end_threshold (float): Amount of silence (in seconds) before
            assuming the callee has finished speaking.
        delay_result (bool): If set to 'true' and if an answering machine is
            detected, the 'answering-machine' callback will be delayed until
            the machine is done speaking or until the 'detectionTimeout' is
            exceeded. If false, the 'answering-machine' result is sent
            immediately. Default is 'false'.
        callback_url (string): The URL to send the 'machineDetectionComplete'
            callback when the detection is completed. Only for 'async' mode.
        callback_method (CallbackMethodEnum): TODO: type description here.
        fallback_url (string): TODO: type description here.
        fallback_method (FallbackMethodEnum): TODO: type description here.
        username (string): TODO: type description here.
        password (string): TODO: type description here.
        fallback_username (string): TODO: type description here.
        fallback_password (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mode": 'mode',
        "detection_timeout": 'detectionTimeout',
        "silence_timeout": 'silenceTimeout',
        "speech_threshold": 'speechThreshold',
        "speech_end_threshold": 'speechEndThreshold',
        "delay_result": 'delayResult',
        "callback_url": 'callbackUrl',
        "callback_method": 'callbackMethod',
        "fallback_url": 'fallbackUrl',
        "fallback_method": 'fallbackMethod',
        "username": 'username',
        "password": 'password',
        "fallback_username": 'fallbackUsername',
        "fallback_password": 'fallbackPassword'
    }

    def __init__(self,
                 mode=None,
                 detection_timeout=None,
                 silence_timeout=None,
                 speech_threshold=None,
                 speech_end_threshold=None,
                 delay_result=None,
                 callback_url=None,
                 callback_method=None,
                 fallback_url=None,
                 fallback_method=None,
                 username=None,
                 password=None,
                 fallback_username=None,
                 fallback_password=None):
        """Constructor for the MachineDetectionRequest class"""

        # Initialize members of the class
        self.mode = mode
        self.detection_timeout = detection_timeout
        self.silence_timeout = silence_timeout
        self.speech_threshold = speech_threshold
        self.speech_end_threshold = speech_end_threshold
        self.delay_result = delay_result
        self.callback_url = callback_url
        self.callback_method = callback_method
        self.fallback_url = fallback_url
        self.fallback_method = fallback_method
        self.username = username
        self.password = password
        self.fallback_username = fallback_username
        self.fallback_password = fallback_password

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mode = dictionary.get('mode')
        detection_timeout = dictionary.get('detectionTimeout')
        silence_timeout = dictionary.get('silenceTimeout')
        speech_threshold = dictionary.get('speechThreshold')
        speech_end_threshold = dictionary.get('speechEndThreshold')
        delay_result = dictionary.get('delayResult')
        callback_url = dictionary.get('callbackUrl')
        callback_method = dictionary.get('callbackMethod')
        fallback_url = dictionary.get('fallbackUrl')
        fallback_method = dictionary.get('fallbackMethod')
        username = dictionary.get('username')
        password = dictionary.get('password')
        fallback_username = dictionary.get('fallbackUsername')
        fallback_password = dictionary.get('fallbackPassword')

        # Return an object of this model
        return cls(mode,
                   detection_timeout,
                   silence_timeout,
                   speech_threshold,
                   speech_end_threshold,
                   delay_result,
                   callback_url,
                   callback_method,
                   fallback_url,
                   fallback_method,
                   username,
                   password,
                   fallback_username,
                   fallback_password)
