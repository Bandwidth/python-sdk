"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.api_client import ApiClient, Endpoint as _Endpoint
from bandwidth.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bandwidth.model.error import Error
from bandwidth.model.participant import Participant
from bandwidth.model.session import Session
from bandwidth.model.subscriptions import Subscriptions


class SessionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_participant_to_session_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}',
                'operation_id': 'add_participant_to_session',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                    'participant_id',
                    'subscriptions',
                ],
                'required': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                    'participant_id':
                        (str,),
                    'subscriptions':
                        (Subscriptions,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                    'participant_id': 'participantId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                    'participant_id': 'path',
                    'subscriptions': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_session_endpoint = _Endpoint(
            settings={
                'response_type': (Session,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions',
                'operation_id': 'create_session',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session':
                        (Session,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_session_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}',
                'operation_id': 'delete_session',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                ],
                'required': [
                    'account_id',
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_participant_subscriptions_endpoint = _Endpoint(
            settings={
                'response_type': (Subscriptions,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions',
                'operation_id': 'get_participant_subscriptions',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'required': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                    'participant_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                    'participant_id': 'participantId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                    'participant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_session_endpoint = _Endpoint(
            settings={
                'response_type': (Session,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}',
                'operation_id': 'get_session',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                ],
                'required': [
                    'account_id',
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_session_participants_endpoint = _Endpoint(
            settings={
                'response_type': ([Participant],),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}/participants',
                'operation_id': 'list_session_participants',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                ],
                'required': [
                    'account_id',
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_participant_from_session_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}',
                'operation_id': 'remove_participant_from_session',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'required': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                    'participant_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                    'participant_id': 'participantId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                    'participant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_participant_subscriptions_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions',
                'operation_id': 'update_participant_subscriptions',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://api.webrtc.bandwidth.com/v1",
                        'description': "Production WebRTC APIs",
                    },
                    {
                        'url': "https://rtc-api.edge.bandwidth.com/v1",
                        'description': "Staging WebRTC APIs",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'session_id',
                    'participant_id',
                    'subscriptions',
                ],
                'required': [
                    'account_id',
                    'session_id',
                    'participant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'session_id':
                        (str,),
                    'participant_id':
                        (str,),
                    'subscriptions':
                        (Subscriptions,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'session_id': 'sessionId',
                    'participant_id': 'participantId',
                },
                'location_map': {
                    'account_id': 'path',
                    'session_id': 'path',
                    'participant_id': 'path',
                    'subscriptions': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_participant_to_session(
        self,
        account_id,
        session_id,
        participant_id,
        **kwargs
    ):
        """Add Participant to Session  # noqa: E501

        Add a participant to a session.  Subscriptions can optionally be provided as part of this call.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_participant_to_session(account_id, session_id, participant_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID
            participant_id (str): Participant ID

        Keyword Args:
            subscriptions (Subscriptions): Optional set of subscriptions to set on the participant. Calling this endpoint with no/empty body will only add the participant to the session.  NOTE: the request body for this endpoint is OPTIONAL and provided as a convenience to avoid calls to this and the Update Participant Subscriptions endpoint.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        kwargs['participant_id'] = \
            participant_id
        return self.add_participant_to_session_endpoint.call_with_http_info(**kwargs)

    def create_session(
        self,
        account_id,
        **kwargs
    ):
        """Create Session  # noqa: E501

        Create a new session.  Sessions are idempotent, so relevant parameters must be set in this function if desired.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_session(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID

        Keyword Args:
            session (Session): Session parameters. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Session
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        return self.create_session_endpoint.call_with_http_info(**kwargs)

    def delete_session(
        self,
        account_id,
        session_id,
        **kwargs
    ):
        """Delete Session  # noqa: E501

        Delete session by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_session(account_id, session_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        return self.delete_session_endpoint.call_with_http_info(**kwargs)

    def get_participant_subscriptions(
        self,
        account_id,
        session_id,
        participant_id,
        **kwargs
    ):
        """Get Participant Subscriptions  # noqa: E501

        Get a participant's subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_participant_subscriptions(account_id, session_id, participant_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID
            participant_id (str): Participant ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Subscriptions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        kwargs['participant_id'] = \
            participant_id
        return self.get_participant_subscriptions_endpoint.call_with_http_info(**kwargs)

    def get_session(
        self,
        account_id,
        session_id,
        **kwargs
    ):
        """Get Session  # noqa: E501

        Get session by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_session(account_id, session_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Session
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        return self.get_session_endpoint.call_with_http_info(**kwargs)

    def list_session_participants(
        self,
        account_id,
        session_id,
        **kwargs
    ):
        """List Participants in Session  # noqa: E501

        List participants in a session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_session_participants(account_id, session_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Participant]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        return self.list_session_participants_endpoint.call_with_http_info(**kwargs)

    def remove_participant_from_session(
        self,
        account_id,
        session_id,
        participant_id,
        **kwargs
    ):
        """Remove Participant from Session  # noqa: E501

        Remove a participant from a session.  This will automatically remove any subscriptions the participant has associated with this session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_participant_from_session(account_id, session_id, participant_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID
            participant_id (str): Participant ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        kwargs['participant_id'] = \
            participant_id
        return self.remove_participant_from_session_endpoint.call_with_http_info(**kwargs)

    def update_participant_subscriptions(
        self,
        account_id,
        session_id,
        participant_id,
        **kwargs
    ):
        """Update Participant Subscriptions  # noqa: E501

        Update a participant's subscriptions.  This is a full update that will replace the participant's subscriptions. First call `getParticipantSubscriptions` if you need the current subscriptions. Call this function with no `Subscriptions` object to remove all subscriptions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_participant_subscriptions(account_id, session_id, participant_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Account ID
            session_id (str): Session ID
            participant_id (str): Participant ID

        Keyword Args:
            subscriptions (Subscriptions): Initial state. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['session_id'] = \
            session_id
        kwargs['participant_id'] = \
            participant_id
        return self.update_participant_subscriptions_endpoint.call_with_http_info(**kwargs)

