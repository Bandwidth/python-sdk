"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.api_client import ApiClient, Endpoint as _Endpoint
from bandwidth.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bandwidth.model.conference import Conference
from bandwidth.model.conference_member import ConferenceMember
from bandwidth.model.conference_recording_metadata import ConferenceRecordingMetadata
from bandwidth.model.update_conference import UpdateConference
from bandwidth.model.update_conference_member import UpdateConferenceMember
from bandwidth.model.voice_api_error import VoiceApiError


class ConferencesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.download_conference_recording_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media',
                'operation_id': 'download_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'audio/vnd.wave',
                    'audio/mpeg',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_endpoint = _Endpoint(
            settings={
                'response_type': (Conference,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}',
                'operation_id': 'get_conference',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_member_endpoint = _Endpoint(
            settings={
                'response_type': (ConferenceMember,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}',
                'operation_id': 'get_conference_member',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'member_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'member_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'member_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'member_id': 'memberId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'member_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_recording_endpoint = _Endpoint(
            settings={
                'response_type': (ConferenceRecordingMetadata,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}',
                'operation_id': 'get_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_conference_recordings_endpoint = _Endpoint(
            settings={
                'response_type': ([ConferenceRecordingMetadata],),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/recordings',
                'operation_id': 'list_conference_recordings',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_conferences_endpoint = _Endpoint(
            settings={
                'response_type': ([Conference],),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences',
                'operation_id': 'list_conferences',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'name',
                    'min_created_time',
                    'max_created_time',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'name':
                        (str,),
                    'min_created_time':
                        (str,),
                    'max_created_time':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'name': 'name',
                    'min_created_time': 'minCreatedTime',
                    'max_created_time': 'maxCreatedTime',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'account_id': 'path',
                    'name': 'query',
                    'min_created_time': 'query',
                    'max_created_time': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_conference_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}',
                'operation_id': 'update_conference',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'update_conference',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'update_conference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'update_conference':
                        (UpdateConference,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'update_conference': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_conference_bxml_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/bxml',
                'operation_id': 'update_conference_bxml',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'body',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/xml'
                ]
            },
            api_client=api_client
        )
        self.update_conference_member_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}',
                'operation_id': 'update_conference_member',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'member_id',
                    'update_conference_member',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'member_id',
                    'update_conference_member',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'member_id':
                        (str,),
                    'update_conference_member':
                        (UpdateConferenceMember,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'member_id': 'memberId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'member_id': 'path',
                    'update_conference_member': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def download_conference_recording(
        self,
        account_id,
        conference_id,
        recording_id,
        **kwargs
    ):
        """Download Conference Recording  # noqa: E501

        Downloads the specified recording file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_conference_recording(account_id, conference_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['recording_id'] = \
            recording_id
        return self.download_conference_recording_endpoint.call_with_http_info(**kwargs)

    def get_conference(
        self,
        account_id,
        conference_id,
        **kwargs
    ):
        """Get Conference Information  # noqa: E501

        Returns information about the specified conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference(account_id, conference_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Conference
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        return self.get_conference_endpoint.call_with_http_info(**kwargs)

    def get_conference_member(
        self,
        account_id,
        conference_id,
        member_id,
        **kwargs
    ):
        """Get Conference Member  # noqa: E501

        Returns information about the specified conference member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference_member(account_id, conference_id, member_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            member_id (str): Programmable Voice API Conference Member ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ConferenceMember
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['member_id'] = \
            member_id
        return self.get_conference_member_endpoint.call_with_http_info(**kwargs)

    def get_conference_recording(
        self,
        account_id,
        conference_id,
        recording_id,
        **kwargs
    ):
        """Get Conference Recording Information  # noqa: E501

        Returns metadata for the specified recording.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference_recording(account_id, conference_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ConferenceRecordingMetadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['recording_id'] = \
            recording_id
        return self.get_conference_recording_endpoint.call_with_http_info(**kwargs)

    def list_conference_recordings(
        self,
        account_id,
        conference_id,
        **kwargs
    ):
        """Get Conference Recordings  # noqa: E501

        Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_conference_recordings(account_id, conference_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ConferenceRecordingMetadata]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        return self.list_conference_recordings_endpoint.call_with_http_info(**kwargs)

    def list_conferences(
        self,
        account_id,
        **kwargs
    ):
        """Get Conferences  # noqa: E501

        Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_conferences(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID

        Keyword Args:
            name (str): Filter results by the `name` field.. [optional]
            min_created_time (str): Filter results to conferences which have a `createdTime` after or at `minCreatedTime` (in ISO8601 format).. [optional]
            max_created_time (str): Filter results to conferences which have a `createdTime` before or at `maxCreatedTime` (in ISO8601 format).. [optional]
            page_size (int): Specifies the max number of conferences that will be returned.. [optional] if omitted the server will use the default value of 1000
            page_token (str): Not intended for explicit use. To use pagination, follow the links in the `Link` header of the response, as indicated in the endpoint description.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Conference]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.list_conferences_endpoint.call_with_http_info(**kwargs)

    def update_conference(
        self,
        account_id,
        conference_id,
        update_conference,
        **kwargs
    ):
        """Update Conference  # noqa: E501

        Update the conference state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_conference(account_id, conference_id, update_conference, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            update_conference (UpdateConference):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['update_conference'] = \
            update_conference
        return self.update_conference_endpoint.call_with_http_info(**kwargs)

    def update_conference_bxml(
        self,
        account_id,
        conference_id,
        body,
        **kwargs
    ):
        """Update Conference BXML  # noqa: E501

        Update the conference BXML document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_conference_bxml(account_id, conference_id, body, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            body (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['body'] = \
            body
        return self.update_conference_bxml_endpoint.call_with_http_info(**kwargs)

    def update_conference_member(
        self,
        account_id,
        conference_id,
        member_id,
        update_conference_member,
        **kwargs
    ):
        """Update Conference Member  # noqa: E501

        Updates settings for a particular conference member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_conference_member(account_id, conference_id, member_id, update_conference_member, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            conference_id (str): Programmable Voice API Conference ID
            member_id (str): Programmable Voice API Conference Member ID
            update_conference_member (UpdateConferenceMember):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['member_id'] = \
            member_id
        kwargs['update_conference_member'] = \
            update_conference_member
        return self.update_conference_member_endpoint.call_with_http_info(**kwargs)

