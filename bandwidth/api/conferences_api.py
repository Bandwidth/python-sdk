"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.api_client import ApiClient, Endpoint as _Endpoint
from bandwidth.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bandwidth.model.api_error import ApiError
from bandwidth.model.call_recording_metadata import CallRecordingMetadata
from bandwidth.model.conference_member_state import ConferenceMemberState
from bandwidth.model.conference_recording_metadata import ConferenceRecordingMetadata
from bandwidth.model.conference_state import ConferenceState
from bandwidth.model.modify_conference_request import ModifyConferenceRequest


class ConferencesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.download_conference_recording_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media',
                'operation_id': 'download_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'audio/vnd.wave',
                    'audio/mpeg',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_endpoint = _Endpoint(
            settings={
                'response_type': (ConferenceState,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}',
                'operation_id': 'get_conference',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_member_endpoint = _Endpoint(
            settings={
                'response_type': (ConferenceMemberState,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}',
                'operation_id': 'get_conference_member',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'member_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'member_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'member_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'member_id': 'memberId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'member_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_recording_endpoint = _Endpoint(
            settings={
                'response_type': (CallRecordingMetadata,),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}',
                'operation_id': 'get_conference_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conference_recordings_endpoint = _Endpoint(
            settings={
                'response_type': ([ConferenceRecordingMetadata],),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings',
                'operation_id': 'get_conference_recordings',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_conferences_endpoint = _Endpoint(
            settings={
                'response_type': ([ConferenceState],),
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences',
                'operation_id': 'get_conferences',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'name',
                    'min_created_time',
                    'max_created_time',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'name':
                        (str,),
                    'min_created_time':
                        (str,),
                    'max_created_time':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'name': 'name',
                    'min_created_time': 'minCreatedTime',
                    'max_created_time': 'maxCreatedTime',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'account_id': 'path',
                    'name': 'query',
                    'min_created_time': 'query',
                    'max_created_time': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.modify_conference_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}',
                'operation_id': 'modify_conference',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'modify_conference_request',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'modify_conference_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'modify_conference_request':
                        (ModifyConferenceRequest,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'modify_conference_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.modify_conference_member_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'httpBasic'
                ],
                'endpoint_path': '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}',
                'operation_id': 'modify_conference_member',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'conference_id',
                    'member_id',
                    'conference_member_state',
                ],
                'required': [
                    'account_id',
                    'conference_id',
                    'member_id',
                    'conference_member_state',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'conference_id':
                        (str,),
                    'member_id':
                        (str,),
                    'conference_member_state':
                        (ConferenceMemberState,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'conference_id': 'conferenceId',
                    'member_id': 'memberId',
                },
                'location_map': {
                    'account_id': 'path',
                    'conference_id': 'path',
                    'member_id': 'path',
                    'conference_member_state': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def download_conference_recording(
        self,
        account_id,
        conference_id,
        recording_id,
        **kwargs
    ):
        """Download Conference Recording  # noqa: E501

        Downloads the specified recording file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_conference_recording(account_id, conference_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):
            recording_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['recording_id'] = \
            recording_id
        return self.download_conference_recording_endpoint.call_with_http_info(**kwargs)

    def get_conference(
        self,
        account_id,
        conference_id,
        **kwargs
    ):
        """Get Conference Information  # noqa: E501

        Returns information about the specified conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference(account_id, conference_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConferenceState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        return self.get_conference_endpoint.call_with_http_info(**kwargs)

    def get_conference_member(
        self,
        account_id,
        conference_id,
        member_id,
        **kwargs
    ):
        """Get Conference Member  # noqa: E501

        Returns information about the specified conference member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference_member(account_id, conference_id, member_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):
            member_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConferenceMemberState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['member_id'] = \
            member_id
        return self.get_conference_member_endpoint.call_with_http_info(**kwargs)

    def get_conference_recording(
        self,
        account_id,
        conference_id,
        recording_id,
        **kwargs
    ):
        """Get Conference Recording Information  # noqa: E501

        Returns metadata for the specified recording.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference_recording(account_id, conference_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):
            recording_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CallRecordingMetadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['recording_id'] = \
            recording_id
        return self.get_conference_recording_endpoint.call_with_http_info(**kwargs)

    def get_conference_recordings(
        self,
        account_id,
        conference_id,
        **kwargs
    ):
        """Get Conference Recordings  # noqa: E501

        Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conference_recordings(account_id, conference_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ConferenceRecordingMetadata]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        return self.get_conference_recordings_endpoint.call_with_http_info(**kwargs)

    def get_conferences(
        self,
        account_id,
        **kwargs
    ):
        """Get Conferences  # noqa: E501

        Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_conferences(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):

        Keyword Args:
            name (str): Filter results by the `name` field.. [optional]
            min_created_time (str): Filter results to conferences which have a `createdTime` after or at `minCreatedTime` (in ISO8601 format).. [optional]
            max_created_time (str): Filter results to conferences which have a `createdTime` before or at `maxCreatedTime` (in ISO8601 format).. [optional]
            page_size (int): Specifies the max number of conferences that will be returned. Range: integer values between 1 - 1000. Default value is 1000.. [optional] if omitted the server will use the default value of 1000
            page_token (str): Not intended for explicit use. To use pagination, follow the links in the `Link` header of the response, as indicated in the endpoint description.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ConferenceState]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        return self.get_conferences_endpoint.call_with_http_info(**kwargs)

    def modify_conference(
        self,
        account_id,
        conference_id,
        modify_conference_request,
        **kwargs
    ):
        """Update Conference  # noqa: E501

        Modify the conference state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_conference(account_id, conference_id, modify_conference_request, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):
            modify_conference_request (ModifyConferenceRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['modify_conference_request'] = \
            modify_conference_request
        return self.modify_conference_endpoint.call_with_http_info(**kwargs)

    def modify_conference_member(
        self,
        account_id,
        conference_id,
        member_id,
        conference_member_state,
        **kwargs
    ):
        """Update Conference Member  # noqa: E501

        Updates settings for a particular conference member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_conference_member(account_id, conference_id, member_id, conference_member_state, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str):
            conference_id (str):
            member_id (str):
            conference_member_state (ConferenceMemberState):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['conference_id'] = \
            conference_id
        kwargs['member_id'] = \
            member_id
        kwargs['conference_member_state'] = \
            conference_member_state
        return self.modify_conference_member_endpoint.call_with_http_info(**kwargs)

