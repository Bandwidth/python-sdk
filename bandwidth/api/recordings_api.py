"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.api_client import ApiClient, Endpoint as _Endpoint
from bandwidth.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bandwidth.model.call_recording_metadata import CallRecordingMetadata
from bandwidth.model.transcribe_recording import TranscribeRecording
from bandwidth.model.transcription_list import TranscriptionList
from bandwidth.model.update_call_recording import UpdateCallRecording
from bandwidth.model.voice_api_error import VoiceApiError


class RecordingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_call_transcription_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription',
                'operation_id': 'delete_call_transcription',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_recording_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}',
                'operation_id': 'delete_recording',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_recording_media_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media',
                'operation_id': 'delete_recording_media',
                'http_method': 'DELETE',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.download_call_recording_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media',
                'operation_id': 'download_call_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'audio/vnd.wave',
                    'audio/mpeg',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_call_recording_endpoint = _Endpoint(
            settings={
                'response_type': (CallRecordingMetadata,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}',
                'operation_id': 'get_call_recording',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_call_transcription_endpoint = _Endpoint(
            settings={
                'response_type': (TranscriptionList,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription',
                'operation_id': 'get_call_transcription',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_account_call_recordings_endpoint = _Endpoint(
            settings={
                'response_type': ([CallRecordingMetadata],),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/recordings',
                'operation_id': 'list_account_call_recordings',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'to',
                    '_from',
                    'min_start_time',
                    'max_start_time',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'to':
                        (str,),
                    '_from':
                        (str,),
                    'min_start_time':
                        (str,),
                    'max_start_time':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'to': 'to',
                    '_from': 'from',
                    'min_start_time': 'minStartTime',
                    'max_start_time': 'maxStartTime',
                },
                'location_map': {
                    'account_id': 'path',
                    'to': 'query',
                    '_from': 'query',
                    'min_start_time': 'query',
                    'max_start_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_call_recordings_endpoint = _Endpoint(
            settings={
                'response_type': ([CallRecordingMetadata],),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings',
                'operation_id': 'list_call_recordings',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                ],
                'required': [
                    'account_id',
                    'call_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.transcribe_call_recording_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription',
                'operation_id': 'transcribe_call_recording',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'recording_id',
                    'transcribe_recording',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'recording_id',
                    'transcribe_recording',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'recording_id':
                        (str,),
                    'transcribe_recording':
                        (TranscribeRecording,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                    'recording_id': 'recordingId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'recording_id': 'path',
                    'transcribe_recording': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_call_recording_state_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/accounts/{accountId}/calls/{callId}/recording',
                'operation_id': 'update_call_recording_state',
                'http_method': 'PUT',
                'servers': [
                    {
                        'url': "https://voice.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'call_id',
                    'update_call_recording',
                ],
                'required': [
                    'account_id',
                    'call_id',
                    'update_call_recording',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'call_id':
                        (str,),
                    'update_call_recording':
                        (UpdateCallRecording,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'call_id': 'callId',
                },
                'location_map': {
                    'account_id': 'path',
                    'call_id': 'path',
                    'update_call_recording': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def delete_call_transcription(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Delete Transcription  # noqa: E501

        Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_call_transcription(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.delete_call_transcription_endpoint.call_with_http_info(**kwargs)

    def delete_recording(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Delete Recording  # noqa: E501

        Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recording(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.delete_recording_endpoint.call_with_http_info(**kwargs)

    def delete_recording_media(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Delete Recording Media  # noqa: E501

        Deletes the specified recording's media.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_recording_media(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.delete_recording_media_endpoint.call_with_http_info(**kwargs)

    def download_call_recording(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Download Recording  # noqa: E501

        Downloads the specified recording.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_call_recording(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.download_call_recording_endpoint.call_with_http_info(**kwargs)

    def get_call_recording(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Get Call Recording  # noqa: E501

        Returns metadata for the specified recording.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_call_recording(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CallRecordingMetadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.get_call_recording_endpoint.call_with_http_info(**kwargs)

    def get_call_transcription(
        self,
        account_id,
        call_id,
        recording_id,
        **kwargs
    ):
        """Get Transcription  # noqa: E501

        Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_call_transcription(account_id, call_id, recording_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TranscriptionList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        return self.get_call_transcription_endpoint.call_with_http_info(**kwargs)

    def list_account_call_recordings(
        self,
        account_id,
        **kwargs
    ):
        """Get Call Recordings  # noqa: E501

        Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_account_call_recordings(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID

        Keyword Args:
            to (str): Filter results by the `to` field.. [optional]
            _from (str): Filter results by the `from` field.. [optional]
            min_start_time (str): Filter results to recordings which have a `startTime` after or including `minStartTime` (in ISO8601 format).. [optional]
            max_start_time (str): Filter results to recordings which have a `startTime` before `maxStartTime` (in ISO8601 format).. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CallRecordingMetadata]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.list_account_call_recordings_endpoint.call_with_http_info(**kwargs)

    def list_call_recordings(
        self,
        account_id,
        call_id,
        **kwargs
    ):
        """List Call Recordings  # noqa: E501

        Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_call_recordings(account_id, call_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CallRecordingMetadata]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        return self.list_call_recordings_endpoint.call_with_http_info(**kwargs)

    def transcribe_call_recording(
        self,
        account_id,
        call_id,
        recording_id,
        transcribe_recording,
        **kwargs
    ):
        """Create Transcription Request  # noqa: E501

        Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transcribe_call_recording(account_id, call_id, recording_id, transcribe_recording, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            recording_id (str): Programmable Voice API Recording ID
            transcribe_recording (TranscribeRecording):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['recording_id'] = \
            recording_id
        kwargs['transcribe_recording'] = \
            transcribe_recording
        return self.transcribe_call_recording_endpoint.call_with_http_info(**kwargs)

    def update_call_recording_state(
        self,
        account_id,
        call_id,
        update_call_recording,
        **kwargs
    ):
        """Update Recording  # noqa: E501

        Pause or resume a recording on an active phone call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_call_recording_state(account_id, call_id, update_call_recording, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID
            call_id (str): Programmable Voice API Call ID
            update_call_recording (UpdateCallRecording):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['call_id'] = \
            call_id
        kwargs['update_call_recording'] = \
            update_call_recording
        return self.update_call_recording_state_endpoint.call_with_http_info(**kwargs)

