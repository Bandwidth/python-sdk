"""
    Bandwidth

    Bandwidth's Communication APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: letstalk@bandwidth.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bandwidth.api_client import ApiClient, Endpoint as _Endpoint
from bandwidth.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bandwidth.model.create_message_request_error import CreateMessageRequestError
from bandwidth.model.list_message_direction_enum import ListMessageDirectionEnum
from bandwidth.model.message import Message
from bandwidth.model.message_request import MessageRequest
from bandwidth.model.message_status_enum import MessageStatusEnum
from bandwidth.model.message_type_enum import MessageTypeEnum
from bandwidth.model.messages_list import MessagesList
from bandwidth.model.messaging_request_error import MessagingRequestError


class MessagesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_message_endpoint = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/users/{accountId}/messages',
                'operation_id': 'create_message',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://messaging.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'message_request',
                ],
                'required': [
                    'account_id',
                    'message_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'message_request':
                        (MessageRequest,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                },
                'location_map': {
                    'account_id': 'path',
                    'message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_messages_endpoint = _Endpoint(
            settings={
                'response_type': (MessagesList,),
                'auth': [
                    'Basic'
                ],
                'endpoint_path': '/users/{accountId}/messages',
                'operation_id': 'list_messages',
                'http_method': 'GET',
                'servers': [
                    {
                        'url': "https://messaging.bandwidth.com/api/v2",
                        'description': "Production",
                    },
                ]
            },
            params_map={
                'all': [
                    'account_id',
                    'message_id',
                    'source_tn',
                    'destination_tn',
                    'message_status',
                    'message_direction',
                    'carrier_name',
                    'message_type',
                    'error_code',
                    'from_date_time',
                    'to_date_time',
                    'sort',
                    'page_token',
                    'limit',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'message_id':
                        (str,),
                    'source_tn':
                        (str,),
                    'destination_tn':
                        (str,),
                    'message_status':
                        (MessageStatusEnum,),
                    'message_direction':
                        (ListMessageDirectionEnum,),
                    'carrier_name':
                        (str,),
                    'message_type':
                        (MessageTypeEnum,),
                    'error_code':
                        (int,),
                    'from_date_time':
                        (str,),
                    'to_date_time':
                        (str,),
                    'sort':
                        (str,),
                    'page_token':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'message_id': 'messageId',
                    'source_tn': 'sourceTn',
                    'destination_tn': 'destinationTn',
                    'message_status': 'messageStatus',
                    'message_direction': 'messageDirection',
                    'carrier_name': 'carrierName',
                    'message_type': 'messageType',
                    'error_code': 'errorCode',
                    'from_date_time': 'fromDateTime',
                    'to_date_time': 'toDateTime',
                    'sort': 'sort',
                    'page_token': 'pageToken',
                    'limit': 'limit',
                },
                'location_map': {
                    'account_id': 'path',
                    'message_id': 'query',
                    'source_tn': 'query',
                    'destination_tn': 'query',
                    'message_status': 'query',
                    'message_direction': 'query',
                    'carrier_name': 'query',
                    'message_type': 'query',
                    'error_code': 'query',
                    'from_date_time': 'query',
                    'to_date_time': 'query',
                    'sort': 'query',
                    'page_token': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_message(
        self,
        account_id,
        message_request,
        **kwargs
    ):
        """Create Message  # noqa: E501

        Endpoint for sending text messages and picture messages using V2 messaging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_message(account_id, message_request, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID.
            message_request (MessageRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Message
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        kwargs['message_request'] = \
            message_request
        return self.create_message_endpoint.call_with_http_info(**kwargs)

    def list_messages(
        self,
        account_id,
        **kwargs
    ):
        """List Messages  # noqa: E501

        Returns a list of messages based on query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_messages(account_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): Your Bandwidth Account ID.

        Keyword Args:
            message_id (str): The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter.. [optional]
            source_tn (str): The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').. [optional]
            destination_tn (str): The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').. [optional]
            message_status (MessageStatusEnum): The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED.. [optional]
            message_direction (ListMessageDirectionEnum): The direction of the message. One of INBOUND OUTBOUND.. [optional]
            carrier_name (str): The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&T should be passed as AT%26T).. [optional]
            message_type (MessageTypeEnum): The type of message. Either sms or mms.. [optional]
            error_code (int): The error code of the message.. [optional]
            from_date_time (str): The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.. [optional]
            to_date_time (str): The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.. [optional]
            sort (str): The field and direction to sort by combined with a colon. Direction is either asc or desc.. [optional]
            page_token (str): A base64 encoded value used for pagination of results.. [optional]
            limit (int): The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MessagesList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['account_id'] = \
            account_id
        return self.list_messages_endpoint.call_with_http_info(**kwargs)

